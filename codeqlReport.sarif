{"$schema":"https://json.schemastore.org/sarif-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"CodeQL","organization":"GitHub","semanticVersion":"2.17.6","notifications":[{"id":"java/diagnostics/extraction-errors","name":"java/diagnostics/extraction-errors","shortDescription":{"text":"Extraction errors"},"fullDescription":{"text":"A list of extraction errors for files in the source code directory."},"defaultConfiguration":{"enabled":true},"properties":{"description":"A list of extraction errors for files in the source code directory.","id":"java/diagnostics/extraction-errors","kind":"diagnostic","name":"Extraction errors"}},{"id":"java/diagnostics/successfully-extracted-files","name":"java/diagnostics/successfully-extracted-files","shortDescription":{"text":"Extracted files"},"fullDescription":{"text":"A list of all files in the source code directory that were extracted."},"defaultConfiguration":{"enabled":true},"properties":{"tags":["successfully-extracted-files"],"description":"A list of all files in the source code directory that\n              were extracted.","id":"java/diagnostics/successfully-extracted-files","kind":"diagnostic","name":"Extracted files"}},{"id":"java/diagnostics/extraction-warnings","name":"java/diagnostics/extraction-warnings","shortDescription":{"text":"Extraction warnings"},"fullDescription":{"text":"A list of extraction warnings for files in the source code directory."},"defaultConfiguration":{"enabled":true},"properties":{"description":"A list of extraction warnings for files in the source code directory.","id":"java/diagnostics/extraction-warnings","kind":"diagnostic","name":"Extraction warnings"}},{"id":"java/baseline/expected-extracted-files","name":"java/baseline/expected-extracted-files","shortDescription":{"text":"Expected extracted files"},"fullDescription":{"text":"Files appearing in the source archive that are expected to be extracted."},"defaultConfiguration":{"enabled":true},"properties":{"tags":["expected-extracted-files","telemetry"]}},{"id":"cli/sip-enablement","name":"cli/sip-enablement","shortDescription":{"text":"macOS SIP enablement status"},"fullDescription":{"text":"macOS SIP enablement status"},"defaultConfiguration":{"enabled":true}}],"rules":[{"id":"java/unsafe-hostname-verification","name":"java/unsafe-hostname-verification","shortDescription":{"text":"Unsafe hostname verification"},"fullDescription":{"text":"Marking a certificate as valid for a host without checking the certificate hostname allows an attacker to perform a machine-in-the-middle attack."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-297"],"description":"Marking a certificate as valid for a host without checking the certificate hostname allows an attacker to perform a machine-in-the-middle attack.","id":"java/unsafe-hostname-verification","kind":"path-problem","name":"Unsafe hostname verification","precision":"high","problem.severity":"error","security-severity":"5.9"}},{"id":"java/insecure-bean-validation","name":"java/insecure-bean-validation","shortDescription":{"text":"Insecure Bean Validation"},"fullDescription":{"text":"User-controlled data may be evaluated as a Java EL expression, leading to arbitrary code execution."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-094"],"description":"User-controlled data may be evaluated as a Java EL expression, leading to arbitrary code execution.","id":"java/insecure-bean-validation","kind":"path-problem","name":"Insecure Bean Validation","precision":"high","problem.severity":"error","security-severity":"9.3"}},{"id":"java/groovy-injection","name":"java/groovy-injection","shortDescription":{"text":"Groovy Language injection"},"fullDescription":{"text":"Evaluation of a user-controlled Groovy script may lead to arbitrary code execution."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-094"],"description":"Evaluation of a user-controlled Groovy script\n              may lead to arbitrary code execution.","id":"java/groovy-injection","kind":"path-problem","name":"Groovy Language injection","precision":"high","problem.severity":"error","security-severity":"9.3"}},{"id":"java/server-side-template-injection","name":"java/server-side-template-injection","shortDescription":{"text":"Server-side template injection"},"fullDescription":{"text":"Untrusted input interpreted as a template can lead to remote code execution."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-1336","external/cwe/cwe-094"],"description":"Untrusted input interpreted as a template can lead to remote code execution.","id":"java/server-side-template-injection","kind":"path-problem","name":"Server-side template injection","precision":"high","problem.severity":"error","security-severity":"9.3"}},{"id":"java/mvel-expression-injection","name":"java/mvel-expression-injection","shortDescription":{"text":"Expression language injection (MVEL)"},"fullDescription":{"text":"Evaluation of a user-controlled MVEL expression may lead to remote code execution."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-094"],"description":"Evaluation of a user-controlled MVEL expression\n              may lead to remote code execution.","id":"java/mvel-expression-injection","kind":"path-problem","name":"Expression language injection (MVEL)","precision":"high","problem.severity":"error","security-severity":"9.3"}},{"id":"java/jexl-expression-injection","name":"java/jexl-expression-injection","shortDescription":{"text":"Expression language injection (JEXL)"},"fullDescription":{"text":"Evaluation of a user-controlled JEXL expression may lead to arbitrary code execution."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-094"],"description":"Evaluation of a user-controlled JEXL expression\n              may lead to arbitrary code execution.","id":"java/jexl-expression-injection","kind":"path-problem","name":"Expression language injection (JEXL)","precision":"high","problem.severity":"error","security-severity":"9.3"}},{"id":"java/spel-expression-injection","name":"java/spel-expression-injection","shortDescription":{"text":"Expression language injection (Spring)"},"fullDescription":{"text":"Evaluation of a user-controlled Spring Expression Language (SpEL) expression may lead to remote code execution."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-094"],"description":"Evaluation of a user-controlled Spring Expression Language (SpEL) expression\n              may lead to remote code execution.","id":"java/spel-expression-injection","kind":"path-problem","name":"Expression language injection (Spring)","precision":"high","problem.severity":"error","security-severity":"9.3"}},{"id":"java/stack-trace-exposure","name":"java/stack-trace-exposure","shortDescription":{"text":"Information exposure through a stack trace"},"fullDescription":{"text":"Information from a stack trace propagates to an external user. Stack traces can unintentionally reveal implementation details that are useful to an attacker for developing a subsequent exploit."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-209","external/cwe/cwe-497"],"description":"Information from a stack trace propagates to an external user.\n              Stack traces can unintentionally reveal implementation details\n              that are useful to an attacker for developing a subsequent exploit.","id":"java/stack-trace-exposure","kind":"problem","name":"Information exposure through a stack trace","precision":"high","problem.severity":"error","security-severity":"5.4"}},{"id":"java/tainted-permissions-check","name":"java/tainted-permissions-check","shortDescription":{"text":"User-controlled data used in permissions check"},"fullDescription":{"text":"Using user-controlled data in a permissions check may result in inappropriate permissions being granted."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-807","external/cwe/cwe-290"],"description":"Using user-controlled data in a permissions check may result in inappropriate\n              permissions being granted.","id":"java/tainted-permissions-check","kind":"path-problem","name":"User-controlled data used in permissions check","precision":"high","problem.severity":"error","security-severity":"7.8"}},{"id":"java/unvalidated-url-redirection","name":"java/unvalidated-url-redirection","shortDescription":{"text":"URL redirection from remote source"},"fullDescription":{"text":"URL redirection based on unvalidated user-input may cause redirection to malicious web sites."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-601"],"description":"URL redirection based on unvalidated user-input\n              may cause redirection to malicious web sites.","id":"java/unvalidated-url-redirection","kind":"path-problem","name":"URL redirection from remote source","precision":"high","problem.severity":"error","security-severity":"6.1"}},{"id":"java/android/implicitly-exported-component","name":"java/android/implicitly-exported-component","shortDescription":{"text":"Implicitly exported Android component"},"fullDescription":{"text":"Android components with an '<intent-filter>' and no 'android:exported' attribute are implicitly exported, which can allow for improper access to the components themselves and to their data."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-926"],"description":"Android components with an '<intent-filter>' and no 'android:exported' attribute are implicitly exported, which can allow for improper access to the components themselves and to their data.","id":"java/android/implicitly-exported-component","kind":"problem","name":"Implicitly exported Android component","precision":"high","problem.severity":"warning","security-severity":"8.2"}},{"id":"java/rsa-without-oaep","name":"java/rsa-without-oaep","shortDescription":{"text":"Use of RSA algorithm without OAEP"},"fullDescription":{"text":"Using RSA encryption without OAEP padding can result in a padding oracle attack, leading to a weaker encryption."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-780"],"description":"Using RSA encryption without OAEP padding can result in a padding oracle attack, leading to a weaker encryption.","id":"java/rsa-without-oaep","kind":"path-problem","name":"Use of RSA algorithm without OAEP","precision":"high","problem.severity":"warning","security-severity":"7.5"}},{"id":"java/insufficient-key-size","name":"java/insufficient-key-size","shortDescription":{"text":"Use of a cryptographic algorithm with insufficient key size"},"fullDescription":{"text":"Using cryptographic algorithms with too small a key size can allow an attacker to compromise security."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-326"],"description":"Using cryptographic algorithms with too small a key size can\n              allow an attacker to compromise security.","id":"java/insufficient-key-size","kind":"path-problem","name":"Use of a cryptographic algorithm with insufficient key size","precision":"high","problem.severity":"warning","security-severity":"7.5"}},{"id":"java/maven/dependency-upon-bintray","name":"java/maven/dependency-upon-bintray","shortDescription":{"text":"Depending upon JCenter/Bintray as an artifact repository"},"fullDescription":{"text":"Using a deprecated artifact repository may eventually give attackers access for a supply chain attack."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-1104"],"description":"Using a deprecated artifact repository may eventually give attackers access for a supply chain attack.","id":"java/maven/dependency-upon-bintray","kind":"problem","name":"Depending upon JCenter/Bintray as an artifact repository","precision":"very-high","problem.severity":"error","security-severity":"6.5"}},{"id":"java/ognl-injection","name":"java/ognl-injection","shortDescription":{"text":"OGNL Expression Language statement with user-controlled input"},"fullDescription":{"text":"Evaluation of OGNL Expression Language statement with user-controlled input can lead to execution of arbitrary code."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-917"],"description":"Evaluation of OGNL Expression Language statement with user-controlled input can\n                lead to execution of arbitrary code.","id":"java/ognl-injection","kind":"path-problem","name":"OGNL Expression Language statement with user-controlled input","precision":"high","problem.severity":"error","security-severity":"9.8"}},{"id":"java/netty-http-request-or-response-splitting","name":"java/netty-http-request-or-response-splitting","shortDescription":{"text":"Disabled Netty HTTP header validation"},"fullDescription":{"text":"Disabling HTTP header validation makes code vulnerable to attack by header splitting if user input is written directly to an HTTP header."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-93","external/cwe/cwe-113"],"description":"Disabling HTTP header validation makes code vulnerable to\n              attack by header splitting if user input is written directly to\n              an HTTP header.","id":"java/netty-http-request-or-response-splitting","kind":"problem","name":"Disabled Netty HTTP header validation","precision":"high","problem.severity":"error","security-severity":"6.1"}},{"id":"java/http-response-splitting","name":"java/http-response-splitting","shortDescription":{"text":"HTTP response splitting"},"fullDescription":{"text":"Writing user input directly to an HTTP header makes code vulnerable to attack by header splitting."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-113"],"description":"Writing user input directly to an HTTP header\n              makes code vulnerable to attack by header splitting.","id":"java/http-response-splitting","kind":"path-problem","name":"HTTP response splitting","precision":"high","problem.severity":"error","security-severity":"6.1"}},{"id":"java/weak-cryptographic-algorithm","name":"java/weak-cryptographic-algorithm","shortDescription":{"text":"Use of a broken or risky cryptographic algorithm"},"fullDescription":{"text":"Using broken or weak cryptographic algorithms can allow an attacker to compromise security."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-327","external/cwe/cwe-328"],"description":"Using broken or weak cryptographic algorithms can allow an attacker to compromise security.","id":"java/weak-cryptographic-algorithm","kind":"path-problem","name":"Use of a broken or risky cryptographic algorithm","precision":"high","problem.severity":"warning","security-severity":"7.5"}},{"id":"java/ssrf","name":"java/ssrf","shortDescription":{"text":"Server-side request forgery"},"fullDescription":{"text":"Making web requests based on unvalidated user-input may cause the server to communicate with malicious servers."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-918"],"description":"Making web requests based on unvalidated user-input\n              may cause the server to communicate with malicious servers.","id":"java/ssrf","kind":"path-problem","name":"Server-side request forgery","precision":"high","problem.severity":"error","security-severity":"9.1"}},{"id":"java/android/implicit-pendingintents","name":"java/android/implicit-pendingintents","shortDescription":{"text":"Use of implicit PendingIntents"},"fullDescription":{"text":"Sending an implicit and mutable 'PendingIntent' to an unspecified third party component may provide an attacker with access to internal components of the application or cause other unintended effects."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-927"],"description":"Sending an implicit and mutable 'PendingIntent' to an unspecified third party\n              component may provide an attacker with access to internal components of the\n              application or cause other unintended effects.","id":"java/android/implicit-pendingintents","kind":"path-problem","name":"Use of implicit PendingIntents","precision":"high","problem.severity":"error","security-severity":"8.2"}},{"id":"java/insecure-ldap-auth","name":"java/insecure-ldap-auth","shortDescription":{"text":"Insecure LDAP authentication"},"fullDescription":{"text":"LDAP authentication with credentials sent in cleartext makes sensitive information vulnerable to remote attackers"},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-522","external/cwe/cwe-319"],"description":"LDAP authentication with credentials sent in cleartext makes sensitive information vulnerable to remote attackers","id":"java/insecure-ldap-auth","kind":"path-problem","name":"Insecure LDAP authentication","precision":"high","problem.severity":"error","security-severity":"8.8"}},{"id":"java/world-writable-file-read","name":"java/world-writable-file-read","shortDescription":{"text":"Reading from a world writable file"},"fullDescription":{"text":"Reading from a file which is set as world writable is dangerous because the file may be modified or removed by external actors."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-732"],"description":"Reading from a file which is set as world writable is dangerous because\n              the file may be modified or removed by external actors.","id":"java/world-writable-file-read","kind":"problem","name":"Reading from a world writable file","precision":"high","problem.severity":"error","security-severity":"7.8"}},{"id":"java/unvalidated-url-forward","name":"java/unvalidated-url-forward","shortDescription":{"text":"URL forward from a remote source"},"fullDescription":{"text":"URL forward based on unvalidated user input may cause file information disclosure."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-552"],"description":"URL forward based on unvalidated user input\n              may cause file information disclosure.","id":"java/unvalidated-url-forward","kind":"path-problem","name":"URL forward from a remote source","precision":"high","problem.severity":"error","security-severity":"7.5"}},{"id":"java/predictable-seed","name":"java/predictable-seed","shortDescription":{"text":"Use of a predictable seed in a secure random number generator"},"fullDescription":{"text":"Using a predictable seed in a pseudo-random number generator can lead to predictability of the numbers generated by it."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-335","external/cwe/cwe-337"],"description":"Using a predictable seed in a pseudo-random number generator can lead to predictability of the numbers generated by it.","id":"java/predictable-seed","kind":"problem","name":"Use of a predictable seed in a secure random number generator","precision":"high","problem.severity":"error","security-severity":"9.8"}},{"id":"java/android/debuggable-attribute-enabled","name":"java/android/debuggable-attribute-enabled","shortDescription":{"text":"Android debuggable attribute enabled"},"fullDescription":{"text":"An enabled debugger can allow for entry points in the application or reveal sensitive information."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-489"],"description":"An enabled debugger can allow for entry points in the application or reveal sensitive information.","id":"java/android/debuggable-attribute-enabled","kind":"problem","name":"Android debuggable attribute enabled","precision":"very-high","problem.severity":"warning","security-severity":"7.2"}},{"id":"java/android/webview-debugging-enabled","name":"java/android/webview-debugging-enabled","shortDescription":{"text":"Android Webview debugging enabled"},"fullDescription":{"text":"Enabling Webview debugging in production builds can expose entry points or leak sensitive information."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-489"],"description":"Enabling Webview debugging in production builds can expose entry points or leak sensitive information.","id":"java/android/webview-debugging-enabled","kind":"path-problem","name":"Android Webview debugging enabled","precision":"high","problem.severity":"warning","security-severity":"7.2"}},{"id":"java/static-initialization-vector","name":"java/static-initialization-vector","shortDescription":{"text":"Using a static initialization vector for encryption"},"fullDescription":{"text":"An initialization vector (IV) used for ciphers of certain modes (such as CBC or GCM) should be unique and unpredictable, to maximize encryption and prevent dictionary attacks."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-329","external/cwe/cwe-1204"],"description":"An initialization vector (IV) used for ciphers of certain modes (such as CBC or GCM) should be unique and unpredictable, to maximize encryption and prevent dictionary attacks.","id":"java/static-initialization-vector","kind":"path-problem","name":"Using a static initialization vector for encryption","precision":"high","problem.severity":"warning","security-severity":"7.5"}},{"id":"java/insecure-cookie","name":"java/insecure-cookie","shortDescription":{"text":"Failure to use secure cookies"},"fullDescription":{"text":"Insecure cookies may be sent in cleartext, which makes them vulnerable to interception."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-614"],"description":"Insecure cookies may be sent in cleartext, which makes them vulnerable to\n              interception.","id":"java/insecure-cookie","kind":"problem","name":"Failure to use secure cookies","precision":"high","problem.severity":"error","security-severity":"5.0"}},{"id":"java/sql-injection","name":"java/sql-injection","shortDescription":{"text":"Query built from user-controlled sources"},"fullDescription":{"text":"Building a SQL or Java Persistence query from user-controlled sources is vulnerable to insertion of malicious code by the user."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-089","external/cwe/cwe-564"],"description":"Building a SQL or Java Persistence query from user-controlled sources is vulnerable to insertion of\n              malicious code by the user.","id":"java/sql-injection","kind":"path-problem","name":"Query built from user-controlled sources","precision":"high","problem.severity":"error","security-severity":"8.8"}},{"id":"java/jndi-injection","name":"java/jndi-injection","shortDescription":{"text":"JNDI lookup with user-controlled name"},"fullDescription":{"text":"Performing a JNDI lookup with a user-controlled name can lead to the download of an untrusted object and to execution of arbitrary code."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-074"],"description":"Performing a JNDI lookup with a user-controlled name can lead to the download of an untrusted\n              object and to execution of arbitrary code.","id":"java/jndi-injection","kind":"path-problem","name":"JNDI lookup with user-controlled name","precision":"high","problem.severity":"error","security-severity":"9.8"}},{"id":"java/xslt-injection","name":"java/xslt-injection","shortDescription":{"text":"XSLT transformation with user-controlled stylesheet"},"fullDescription":{"text":"Performing an XSLT transformation with user-controlled stylesheets can lead to information disclosure or execution of arbitrary code."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-074"],"description":"Performing an XSLT transformation with user-controlled stylesheets can lead to\n              information disclosure or execution of arbitrary code.","id":"java/xslt-injection","kind":"path-problem","name":"XSLT transformation with user-controlled stylesheet","precision":"high","problem.severity":"error","security-severity":"9.8"}},{"id":"java/overly-large-range","name":"java/overly-large-range","shortDescription":{"text":"Overly permissive regular expression range"},"fullDescription":{"text":"Overly permissive regular expression ranges match a wider range of characters than intended. This may allow an attacker to bypass a filter or sanitizer."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["correctness","security","external/cwe/cwe-020"],"description":"Overly permissive regular expression ranges match a wider range of characters than intended.\n              This may allow an attacker to bypass a filter or sanitizer.","id":"java/overly-large-range","kind":"problem","name":"Overly permissive regular expression range","precision":"high","problem.severity":"warning","security-severity":"5.0"}},{"id":"java/ldap-injection","name":"java/ldap-injection","shortDescription":{"text":"LDAP query built from user-controlled sources"},"fullDescription":{"text":"Building an LDAP query from user-controlled sources is vulnerable to insertion of malicious LDAP code by the user."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-090"],"description":"Building an LDAP query from user-controlled sources is vulnerable to insertion of\n              malicious LDAP code by the user.","id":"java/ldap-injection","kind":"path-problem","name":"LDAP query built from user-controlled sources","precision":"high","problem.severity":"error","security-severity":"9.8"}},{"id":"java/android/intent-uri-permission-manipulation","name":"java/android/intent-uri-permission-manipulation","shortDescription":{"text":"Intent URI permission manipulation"},"fullDescription":{"text":"Returning an externally provided Intent via 'setResult' may allow a malicious application to access arbitrary content providers of the vulnerable application."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-266","external/cwe/cwe-926"],"description":"Returning an externally provided Intent via 'setResult' may allow a malicious\n              application to access arbitrary content providers of the vulnerable application.","id":"java/android/intent-uri-permission-manipulation","kind":"path-problem","name":"Intent URI permission manipulation","precision":"high","problem.severity":"error","security-severity":"7.8"}},{"id":"java/improper-webview-certificate-validation","name":"java/improper-webview-certificate-validation","shortDescription":{"text":"Android `WebView` that accepts all certificates"},"fullDescription":{"text":"Trusting all certificates allows an attacker to perform a machine-in-the-middle attack."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-295"],"description":"Trusting all certificates allows an attacker to perform a machine-in-the-middle attack.","id":"java/improper-webview-certificate-validation","kind":"problem","name":"Android `WebView` that accepts all certificates","precision":"high","problem.severity":"error","security-severity":"7.5"}},{"id":"java/insecure-trustmanager","name":"java/insecure-trustmanager","shortDescription":{"text":"`TrustManager` that accepts all certificates"},"fullDescription":{"text":"Trusting all certificates allows an attacker to perform a machine-in-the-middle attack."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-295"],"description":"Trusting all certificates allows an attacker to perform a machine-in-the-middle attack.","id":"java/insecure-trustmanager","kind":"path-problem","name":"`TrustManager` that accepts all certificates","precision":"high","problem.severity":"error","security-severity":"7.5"}},{"id":"java/android/intent-redirection","name":"java/android/intent-redirection","shortDescription":{"text":"Android Intent redirection"},"fullDescription":{"text":"Starting Android components with user-provided Intents can provide access to internal components of the application, increasing the attack surface and potentially causing unintended effects."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-926","external/cwe/cwe-940"],"description":"Starting Android components with user-provided Intents\n              can provide access to internal components of the application,\n              increasing the attack surface and potentially causing unintended effects.","id":"java/android/intent-redirection","kind":"path-problem","name":"Android Intent redirection","precision":"high","problem.severity":"error","security-severity":"7.5"}},{"id":"java/missing-jwt-signature-check","name":"java/missing-jwt-signature-check","shortDescription":{"text":"Missing JWT signature check"},"fullDescription":{"text":"Failing to check the Json Web Token (JWT) signature may allow an attacker to forge their own tokens."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-347"],"description":"Failing to check the Json Web Token (JWT) signature may allow an attacker to forge their own tokens.","id":"java/missing-jwt-signature-check","kind":"path-problem","name":"Missing JWT signature check","precision":"high","problem.severity":"error","security-severity":"7.8"}},{"id":"java/improper-intent-verification","name":"java/improper-intent-verification","shortDescription":{"text":"Improper verification of intent by broadcast receiver"},"fullDescription":{"text":"A broadcast receiver that does not verify intents it receives may be susceptible to unintended behavior by third party applications sending it explicit intents."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-925"],"description":"A broadcast receiver that does not verify intents it receives may be susceptible to unintended behavior by third party applications sending it explicit intents.","id":"java/improper-intent-verification","kind":"problem","name":"Improper verification of intent by broadcast receiver","precision":"high","problem.severity":"warning","security-severity":"8.2"}},{"id":"java/android/backup-enabled","name":"java/android/backup-enabled","shortDescription":{"text":"Application backup allowed"},"fullDescription":{"text":"Allowing application backups may allow an attacker to extract sensitive data."},"defaultConfiguration":{"enabled":true,"level":"note"},"properties":{"tags":["security","external/cwe/cwe-312"],"description":"Allowing application backups may allow an attacker to extract sensitive data.","id":"java/android/backup-enabled","kind":"problem","name":"Application backup allowed","precision":"very-high","problem.severity":"recommendation","security-severity":"7.5"}},{"id":"java/cleartext-storage-in-cookie","name":"java/cleartext-storage-in-cookie","shortDescription":{"text":"Cleartext storage of sensitive information in cookie"},"fullDescription":{"text":"Storing sensitive information in cleartext can expose it to an attacker."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-315"],"description":"Storing sensitive information in cleartext can expose it to an attacker.","id":"java/cleartext-storage-in-cookie","kind":"problem","name":"Cleartext storage of sensitive information in cookie","precision":"high","problem.severity":"error","security-severity":"5.0"}},{"id":"java/insecure-randomness","name":"java/insecure-randomness","shortDescription":{"text":"Insecure randomness"},"fullDescription":{"text":"Using a cryptographically Insecure pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-330","external/cwe/cwe-338"],"description":"Using a cryptographically Insecure pseudo-random number generator to generate a\n              security-sensitive value may allow an attacker to predict what value will\n              be generated.","id":"java/insecure-randomness","kind":"path-problem","name":"Insecure randomness","precision":"high","problem.severity":"warning","security-severity":"7.8"}},{"id":"java/tainted-format-string","name":"java/tainted-format-string","shortDescription":{"text":"Use of externally-controlled format string"},"fullDescription":{"text":"Using external input in format strings can lead to exceptions or information leaks."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-134"],"description":"Using external input in format strings can lead to exceptions or information leaks.","id":"java/tainted-format-string","kind":"path-problem","name":"Use of externally-controlled format string","precision":"high","problem.severity":"error","security-severity":"9.3"}},{"id":"java/spring-disabled-csrf-protection","name":"java/spring-disabled-csrf-protection","shortDescription":{"text":"Disabled Spring CSRF protection"},"fullDescription":{"text":"Disabling CSRF protection makes the application vulnerable to a Cross-Site Request Forgery (CSRF) attack."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-352"],"description":"Disabling CSRF protection makes the application vulnerable to\n              a Cross-Site Request Forgery (CSRF) attack.","id":"java/spring-disabled-csrf-protection","kind":"problem","name":"Disabled Spring CSRF protection","precision":"high","problem.severity":"error","security-severity":"8.8"}},{"id":"java/jhipster-prng","name":"java/jhipster-prng","shortDescription":{"text":"Detect JHipster Generator Vulnerability CVE-2019-16303"},"fullDescription":{"text":"Using a vulnerable version of JHipster to generate random numbers makes it easier for attackers to take over accounts."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-338"],"description":"Using a vulnerable version of JHipster to generate random numbers makes it easier for attackers to take over accounts.","id":"java/jhipster-prng","kind":"problem","name":"Detect JHipster Generator Vulnerability CVE-2019-16303","precision":"very-high","problem.severity":"error","security-severity":"7.8"}},{"id":"java/unsafe-deserialization","name":"java/unsafe-deserialization","shortDescription":{"text":"Deserialization of user-controlled data"},"fullDescription":{"text":"Deserializing user-controlled data may allow attackers to execute arbitrary code."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-502"],"description":"Deserializing user-controlled data may allow attackers to\n              execute arbitrary code.","id":"java/unsafe-deserialization","kind":"path-problem","name":"Deserialization of user-controlled data","precision":"high","problem.severity":"error","security-severity":"9.8"}},{"id":"java/regex-injection","name":"java/regex-injection","shortDescription":{"text":"Regular expression injection"},"fullDescription":{"text":"User input should not be used in regular expressions without first being escaped, otherwise a malicious user may be able to provide a regex that could require exponential time on certain inputs."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-730","external/cwe/cwe-400"],"description":"User input should not be used in regular expressions without first being escaped,\n              otherwise a malicious user may be able to provide a regex that could require\n              exponential time on certain inputs.","id":"java/regex-injection","kind":"path-problem","name":"Regular expression injection","precision":"high","problem.severity":"error","security-severity":"7.5"}},{"id":"java/redos","name":"java/redos","shortDescription":{"text":"Inefficient regular expression"},"fullDescription":{"text":"A regular expression that requires exponential time to match certain inputs can be a performance bottleneck, and may be vulnerable to denial-of-service attacks."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-1333","external/cwe/cwe-730","external/cwe/cwe-400"],"description":"A regular expression that requires exponential time to match certain inputs\n              can be a performance bottleneck, and may be vulnerable to denial-of-service\n              attacks.","id":"java/redos","kind":"problem","name":"Inefficient regular expression","precision":"high","problem.severity":"error","security-severity":"7.5"}},{"id":"java/polynomial-redos","name":"java/polynomial-redos","shortDescription":{"text":"Polynomial regular expression used on uncontrolled data"},"fullDescription":{"text":"A regular expression that can require polynomial time to match may be vulnerable to denial-of-service attacks."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-1333","external/cwe/cwe-730","external/cwe/cwe-400"],"description":"A regular expression that can require polynomial time\n              to match may be vulnerable to denial-of-service attacks.","id":"java/polynomial-redos","kind":"path-problem","name":"Polynomial regular expression used on uncontrolled data","precision":"high","problem.severity":"warning","security-severity":"7.5"}},{"id":"java/android/fragment-injection-preference-activity","name":"java/android/fragment-injection-preference-activity","shortDescription":{"text":"Android fragment injection in PreferenceActivity"},"fullDescription":{"text":"An insecure implementation of the 'isValidFragment' method of the 'PreferenceActivity' class may allow a malicious application to bypass access controls, exposing the application to unintended effects."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-470"],"description":"An insecure implementation of the 'isValidFragment' method\n              of the 'PreferenceActivity' class may allow a malicious application to bypass access controls,\n              exposing the application to unintended effects.","id":"java/android/fragment-injection-preference-activity","kind":"problem","name":"Android fragment injection in PreferenceActivity","precision":"high","problem.severity":"error","security-severity":"9.8"}},{"id":"java/android/fragment-injection","name":"java/android/fragment-injection","shortDescription":{"text":"Android fragment injection"},"fullDescription":{"text":"Instantiating an Android fragment from a user-provided value may allow a malicious application to bypass access controls, exposing the application to unintended effects."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-470"],"description":"Instantiating an Android fragment from a user-provided value\n              may allow a malicious application to bypass access controls,  exposing the application to unintended effects.","id":"java/android/fragment-injection","kind":"path-problem","name":"Android fragment injection","precision":"high","problem.severity":"error","security-severity":"9.8"}},{"id":"java/zipslip","name":"java/zipslip","shortDescription":{"text":"Arbitrary file access during archive extraction (\"Zip Slip\")"},"fullDescription":{"text":"Extracting files from a malicious ZIP file, or similar type of archive, without validating that the destination file path is within the destination directory can allow an attacker to unexpectedly gain access to resources."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-022"],"description":"Extracting files from a malicious ZIP file, or similar type of archive, without\n              validating that the destination file path is within the destination directory\n              can allow an attacker to unexpectedly gain access to resources.","id":"java/zipslip","kind":"path-problem","name":"Arbitrary file access during archive extraction (\"Zip Slip\")","precision":"high","problem.severity":"error","security-severity":"7.5"}},{"id":"java/path-injection","name":"java/path-injection","shortDescription":{"text":"Uncontrolled data used in path expression"},"fullDescription":{"text":"Accessing paths influenced by users can allow an attacker to access unexpected resources."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073"],"description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","id":"java/path-injection","kind":"path-problem","name":"Uncontrolled data used in path expression","precision":"high","problem.severity":"error","security-severity":"7.5"}},{"id":"java/android/unsafe-content-uri-resolution","name":"java/android/unsafe-content-uri-resolution","shortDescription":{"text":"Uncontrolled data used in content resolution"},"fullDescription":{"text":"Resolving externally-provided content URIs without validation can allow an attacker to access unexpected resources."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-441","external/cwe/cwe-610"],"description":"Resolving externally-provided content URIs without validation can allow an attacker\n              to access unexpected resources.","id":"java/android/unsafe-content-uri-resolution","kind":"path-problem","name":"Uncontrolled data used in content resolution","precision":"high","problem.severity":"warning","security-severity":"7.5"}},{"id":"java/xxe","name":"java/xxe","shortDescription":{"text":"Resolving XML external entity in user-controlled data"},"fullDescription":{"text":"Parsing user-controlled XML documents and allowing expansion of external entity references may lead to disclosure of confidential data or denial of service."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-611","external/cwe/cwe-776","external/cwe/cwe-827"],"description":"Parsing user-controlled XML documents and allowing expansion of external entity\n references may lead to disclosure of confidential data or denial of service.","id":"java/xxe","kind":"path-problem","name":"Resolving XML external entity in user-controlled data","precision":"high","problem.severity":"error","security-severity":"9.1"}},{"id":"java/concatenated-command-line","name":"java/concatenated-command-line","shortDescription":{"text":"Building a command line with string concatenation"},"fullDescription":{"text":"Using concatenated strings in a command line is vulnerable to malicious insertion of special characters in the strings."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-078","external/cwe/cwe-088"],"description":"Using concatenated strings in a command line is vulnerable to malicious\n              insertion of special characters in the strings.","id":"java/concatenated-command-line","kind":"problem","name":"Building a command line with string concatenation","precision":"high","problem.severity":"error","security-severity":"9.8"}},{"id":"java/command-line-injection","name":"java/command-line-injection","shortDescription":{"text":"Uncontrolled command line"},"fullDescription":{"text":"Using externally controlled strings in a command line is vulnerable to malicious changes in the strings."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-078","external/cwe/cwe-088"],"description":"Using externally controlled strings in a command line is vulnerable to malicious\n              changes in the strings.","id":"java/command-line-injection","kind":"path-problem","name":"Uncontrolled command line","precision":"high","problem.severity":"error","security-severity":"9.8"}},{"id":"java/tainted-numeric-cast","name":"java/tainted-numeric-cast","shortDescription":{"text":"User-controlled data in numeric cast"},"fullDescription":{"text":"Casting user-controlled numeric data to a narrower type without validation can cause unexpected truncation."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-197","external/cwe/cwe-681"],"description":"Casting user-controlled numeric data to a narrower type without validation\n              can cause unexpected truncation.","id":"java/tainted-numeric-cast","kind":"path-problem","name":"User-controlled data in numeric cast","precision":"high","problem.severity":"error","security-severity":"9.0"}},{"id":"java/partial-path-traversal-from-remote","name":"java/partial-path-traversal-from-remote","shortDescription":{"text":"Partial path traversal vulnerability from remote"},"fullDescription":{"text":"A prefix used to check that a canonicalised path falls within another must be slash-terminated."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-023"],"description":"A prefix used to check that a canonicalised path falls within another must be slash-terminated.","id":"java/partial-path-traversal-from-remote","kind":"path-problem","name":"Partial path traversal vulnerability from remote","precision":"high","problem.severity":"error","security-severity":"9.3"}},{"id":"java/xml/xpath-injection","name":"java/xml/xpath-injection","shortDescription":{"text":"XPath injection"},"fullDescription":{"text":"Building an XPath expression from user-controlled sources is vulnerable to insertion of malicious code by the user."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-643"],"description":"Building an XPath expression from user-controlled sources is vulnerable to insertion of\n              malicious code by the user.","id":"java/xml/xpath-injection","kind":"path-problem","name":"XPath injection","precision":"high","problem.severity":"error","security-severity":"9.8"}},{"id":"java/maven/non-https-url","name":"java/maven/non-https-url","shortDescription":{"text":"Failure to use HTTPS or SFTP URL in Maven artifact upload/download"},"fullDescription":{"text":"Non-HTTPS connections can be intercepted by third parties."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-300","external/cwe/cwe-319","external/cwe/cwe-494","external/cwe/cwe-829"],"description":"Non-HTTPS connections can be intercepted by third parties.","id":"java/maven/non-https-url","kind":"problem","name":"Failure to use HTTPS or SFTP URL in Maven artifact upload/download","precision":"very-high","problem.severity":"error","security-severity":"8.1"}},{"id":"java/xss","name":"java/xss","shortDescription":{"text":"Cross-site scripting"},"fullDescription":{"text":"Writing user input directly to a web page allows for a cross-site scripting vulnerability."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-079"],"description":"Writing user input directly to a web page\n              allows for a cross-site scripting vulnerability.","id":"java/xss","kind":"path-problem","name":"Cross-site scripting","precision":"high","problem.severity":"error","security-severity":"6.1"}},{"id":"java/android/insecure-local-authentication","name":"java/android/insecure-local-authentication","shortDescription":{"text":"Insecure local authentication"},"fullDescription":{"text":"Local authentication that does not make use of a `CryptoObject` can be bypassed."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-287"],"description":"Local authentication that does not make use of a `CryptoObject` can be bypassed.","id":"java/android/insecure-local-authentication","kind":"problem","name":"Insecure local authentication","precision":"high","problem.severity":"warning","security-severity":"4.4"}},{"id":"java/implicit-cast-in-compound-assignment","name":"java/implicit-cast-in-compound-assignment","shortDescription":{"text":"Implicit narrowing conversion in compound assignment"},"fullDescription":{"text":"Compound assignment statements (for example 'intvar += longvar') that implicitly cast a value of a wider type to a narrower type may result in information loss and numeric errors such as overflows."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["reliability","security","external/cwe/cwe-190","external/cwe/cwe-192","external/cwe/cwe-197","external/cwe/cwe-681"],"description":"Compound assignment statements (for example 'intvar += longvar') that implicitly\n              cast a value of a wider type to a narrower type may result in information loss and\n              numeric errors such as overflows.","id":"java/implicit-cast-in-compound-assignment","kind":"problem","name":"Implicit narrowing conversion in compound assignment","precision":"very-high","problem.severity":"warning","security-severity":"8.1"}},{"id":"java/insecure-smtp-ssl","name":"java/insecure-smtp-ssl","shortDescription":{"text":"Insecure JavaMail SSL Configuration"},"fullDescription":{"text":"Configuring a Java application to use authenticated mail session over SSL without certificate validation makes the session susceptible to a man-in-the-middle attack."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-297"],"description":"Configuring a Java application to use authenticated mail session\n              over SSL without certificate validation\n              makes the session susceptible to a man-in-the-middle attack.","id":"java/insecure-smtp-ssl","kind":"problem","name":"Insecure JavaMail SSL Configuration","precision":"medium","problem.severity":"warning","security-severity":"5.9"}},{"id":"java/android/arbitrary-apk-installation","name":"java/android/arbitrary-apk-installation","shortDescription":{"text":"Android APK installation"},"fullDescription":{"text":"Creating an intent with a URI pointing to a untrusted file can lead to the installation of an untrusted application."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-094"],"description":"Creating an intent with a URI pointing to a untrusted file can lead to the installation of an untrusted application.","id":"java/android/arbitrary-apk-installation","kind":"path-problem","name":"Android APK installation","precision":"medium","problem.severity":"error","security-severity":"9.3"}},{"id":"java/user-controlled-bypass","name":"java/user-controlled-bypass","shortDescription":{"text":"User-controlled bypass of sensitive method"},"fullDescription":{"text":"User-controlled bypassing of sensitive methods may allow attackers to avoid passing through authentication systems."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-807","external/cwe/cwe-290"],"description":"User-controlled bypassing of sensitive methods may allow attackers to avoid\n              passing through authentication systems.","id":"java/user-controlled-bypass","kind":"path-problem","name":"User-controlled bypass of sensitive method","precision":"medium","problem.severity":"error","security-severity":"7.8"}},{"id":"java/android/sensitive-text","name":"java/android/sensitive-text","shortDescription":{"text":"Exposure of sensitive information to UI text views"},"fullDescription":{"text":"Sensitive information displayed in UI text views should be properly masked."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-200"],"description":"Sensitive information displayed in UI text views should be properly masked.","id":"java/android/sensitive-text","kind":"path-problem","name":"Exposure of sensitive information to UI text views","precision":"medium","problem.severity":"warning","security-severity":"6.5"}},{"id":"java/local-temp-file-or-directory-information-disclosure","name":"java/local-temp-file-or-directory-information-disclosure","shortDescription":{"text":"Local information disclosure in a temporary directory"},"fullDescription":{"text":"Writing information without explicit permissions to a shared temporary directory may disclose it to other users."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-200","external/cwe/cwe-732"],"description":"Writing information without explicit permissions to a shared temporary directory may disclose it to other users.","id":"java/local-temp-file-or-directory-information-disclosure","kind":"path-problem","name":"Local information disclosure in a temporary directory","precision":"medium","problem.severity":"warning","security-severity":"6.5"}},{"id":"java/android/sensitive-notification","name":"java/android/sensitive-notification","shortDescription":{"text":"Exposure of sensitive information to notifications"},"fullDescription":{"text":"Sensitive information exposed in a system notification can be read by an unauthorized application."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-200"],"description":"Sensitive information exposed in a system notification can be read by an unauthorized application.","id":"java/android/sensitive-notification","kind":"path-problem","name":"Exposure of sensitive information to notifications","precision":"medium","problem.severity":"error","security-severity":"6.5"}},{"id":"java/android/websettings-allow-content-access","name":"java/android/websettings-allow-content-access","shortDescription":{"text":"Android WebView settings allows access to content links"},"fullDescription":{"text":"Access to content providers in a WebView can allow access to protected information by loading content:// links."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-200"],"description":"Access to content providers in a WebView can allow access to protected information by loading content:// links.","id":"java/android/websettings-allow-content-access","kind":"problem","name":"Android WebView settings allows access to content links","precision":"medium","problem.severity":"warning","security-severity":"6.5"}},{"id":"java/android/websettings-file-access","name":"java/android/websettings-file-access","shortDescription":{"text":"Android WebSettings file access"},"fullDescription":{"text":"Enabling access to the file system in a WebView allows attackers to view sensitive information."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-200"],"description":"Enabling access to the file system in a WebView allows attackers to view sensitive information.","id":"java/android/websettings-file-access","kind":"problem","name":"Android WebSettings file access","precision":"medium","problem.severity":"warning","security-severity":"6.5"}},{"id":"java/android/incomplete-provider-permissions","name":"java/android/incomplete-provider-permissions","shortDescription":{"text":"Missing read or write permission in a content provider"},"fullDescription":{"text":"Android content providers which do not configure both read and write permissions can allow permission bypass."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-926"],"description":"Android content providers which do not configure both read and write permissions can allow permission bypass.","id":"java/android/incomplete-provider-permissions","kind":"problem","name":"Missing read or write permission in a content provider","precision":"medium","problem.severity":"warning","security-severity":"8.2"}},{"id":"java/android/sensitive-keyboard-cache","name":"java/android/sensitive-keyboard-cache","shortDescription":{"text":"Android sensitive keyboard cache"},"fullDescription":{"text":"Allowing the keyboard to cache sensitive information may result in information leaks to other applications."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-524"],"description":"Allowing the keyboard to cache sensitive information may result in information leaks to other applications.","id":"java/android/sensitive-keyboard-cache","kind":"problem","name":"Android sensitive keyboard cache","precision":"medium","problem.severity":"warning","security-severity":"8.1"}},{"id":"java/potentially-weak-cryptographic-algorithm","name":"java/potentially-weak-cryptographic-algorithm","shortDescription":{"text":"Use of a potentially broken or risky cryptographic algorithm"},"fullDescription":{"text":"Using broken or weak cryptographic algorithms can allow an attacker to compromise security."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-327","external/cwe/cwe-328"],"description":"Using broken or weak cryptographic algorithms can allow an attacker to compromise security.","id":"java/potentially-weak-cryptographic-algorithm","kind":"path-problem","name":"Use of a potentially broken or risky cryptographic algorithm","precision":"medium","problem.severity":"warning","security-severity":"7.5"}},{"id":"java/android/sensitive-result-receiver","name":"java/android/sensitive-result-receiver","shortDescription":{"text":"Leaking sensitive information through a ResultReceiver"},"fullDescription":{"text":"Sending sensitive data to a 'ResultReceiver' obtained from an untrusted source can allow malicious actors access to your information."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-927"],"description":"Sending sensitive data to a 'ResultReceiver' obtained from an untrusted source\n              can allow malicious actors access to your information.","id":"java/android/sensitive-result-receiver","kind":"path-problem","name":"Leaking sensitive information through a ResultReceiver","precision":"medium","problem.severity":"error","security-severity":"8.2"}},{"id":"java/android/sensitive-communication","name":"java/android/sensitive-communication","shortDescription":{"text":"Leaking sensitive information through an implicit Intent"},"fullDescription":{"text":"An Android application uses implicit Intents containing sensitive data in a way that exposes it to arbitrary applications on the device."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-927"],"description":"An Android application uses implicit Intents containing sensitive data\n              in a way that exposes it to arbitrary applications on the device.","id":"java/android/sensitive-communication","kind":"path-problem","name":"Leaking sensitive information through an implicit Intent","precision":"medium","problem.severity":"warning","security-severity":"8.2"}},{"id":"java/insecure-basic-auth","name":"java/insecure-basic-auth","shortDescription":{"text":"Insecure basic authentication"},"fullDescription":{"text":"Basic authentication only obfuscates username/password in Base64 encoding, which can be easily recognized and reversed. Transmitting sensitive information without using HTTPS makes the data vulnerable to packet sniffing."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-522","external/cwe/cwe-319"],"description":"Basic authentication only obfuscates username/password in\n              Base64 encoding, which can be easily recognized and reversed.\n              Transmitting sensitive information without using HTTPS makes\n              the data vulnerable to packet sniffing.","id":"java/insecure-basic-auth","kind":"path-problem","name":"Insecure basic authentication","precision":"medium","problem.severity":"warning","security-severity":"8.8"}},{"id":"java/tainted-arithmetic","name":"java/tainted-arithmetic","shortDescription":{"text":"User-controlled data in arithmetic expression"},"fullDescription":{"text":"Arithmetic operations on user-controlled data that is not validated can cause overflows."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-190","external/cwe/cwe-191"],"description":"Arithmetic operations on user-controlled data that is not validated can cause\n              overflows.","id":"java/tainted-arithmetic","kind":"path-problem","name":"User-controlled data in arithmetic expression","precision":"medium","problem.severity":"warning","security-severity":"8.6"}},{"id":"java/comparison-with-wider-type","name":"java/comparison-with-wider-type","shortDescription":{"text":"Comparison of narrow type with wide type in loop condition"},"fullDescription":{"text":"Comparisons between types of different widths in a loop condition can cause the loop to behave unexpectedly."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["reliability","security","external/cwe/cwe-190","external/cwe/cwe-197"],"description":"Comparisons between types of different widths in a loop condition can cause the loop\n              to behave unexpectedly.","id":"java/comparison-with-wider-type","kind":"problem","name":"Comparison of narrow type with wide type in loop condition","precision":"medium","problem.severity":"warning","security-severity":"8.1"}},{"id":"java/uncontrolled-arithmetic","name":"java/uncontrolled-arithmetic","shortDescription":{"text":"Uncontrolled data in arithmetic expression"},"fullDescription":{"text":"Arithmetic operations on uncontrolled data that is not validated can cause overflows."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-190","external/cwe/cwe-191"],"description":"Arithmetic operations on uncontrolled data that is not validated can cause\n              overflows.","id":"java/uncontrolled-arithmetic","kind":"path-problem","name":"Uncontrolled data in arithmetic expression","precision":"medium","problem.severity":"warning","security-severity":"8.6"}},{"id":"java/toctou-race-condition","name":"java/toctou-race-condition","shortDescription":{"text":"Time-of-check time-of-use race condition"},"fullDescription":{"text":"Using a resource after an unsynchronized state check can lead to a race condition, if the state may be changed between the check and use."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-367"],"description":"Using a resource after an unsynchronized state check can lead to a race condition,\n              if the state may be changed between the check and use.","id":"java/toctou-race-condition","kind":"problem","name":"Time-of-check time-of-use race condition","precision":"medium","problem.severity":"warning","security-severity":"7.7"}},{"id":"java/trust-boundary-violation","name":"java/trust-boundary-violation","shortDescription":{"text":"Trust boundary violation"},"fullDescription":{"text":"Modifying the HTTP session attributes based on data from an untrusted source may violate a trust boundary."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-501"],"description":"Modifying the HTTP session attributes based on data from an untrusted source may violate a trust boundary.","id":"java/trust-boundary-violation","kind":"path-problem","name":"Trust boundary violation","precision":"medium","problem.severity":"error","security-severity":"8.8"}},{"id":"java/concatenated-sql-query","name":"java/concatenated-sql-query","shortDescription":{"text":"Query built by concatenation with a possibly-untrusted string"},"fullDescription":{"text":"Building a SQL or Java Persistence query by concatenating a possibly-untrusted string is vulnerable to insertion of malicious code."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-089","external/cwe/cwe-564"],"description":"Building a SQL or Java Persistence query by concatenating a possibly-untrusted string\n              is vulnerable to insertion of malicious code.","id":"java/concatenated-sql-query","kind":"problem","name":"Query built by concatenation with a possibly-untrusted string","precision":"medium","problem.severity":"error","security-severity":"8.8"}},{"id":"java/socket-auth-race-condition","name":"java/socket-auth-race-condition","shortDescription":{"text":"Race condition in socket authentication"},"fullDescription":{"text":"Opening a socket after authenticating via a different channel may allow an attacker to connect to the port first."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-421"],"description":"Opening a socket after authenticating via a different channel may allow an attacker to connect to the port first.","id":"java/socket-auth-race-condition","kind":"problem","name":"Race condition in socket authentication","precision":"medium","problem.severity":"warning","security-severity":"7.2"}},{"id":"java/potentially-dangerous-function","name":"java/potentially-dangerous-function","shortDescription":{"text":"Use of a potentially dangerous function"},"fullDescription":{"text":"Certain standard library routines are dangerous to call."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["reliability","security","external/cwe/cwe-676"],"description":"Certain standard library routines are dangerous to call.","id":"java/potentially-dangerous-function","kind":"problem","name":"Use of a potentially dangerous function","precision":"medium","problem.severity":"warning","security-severity":"10.0"}},{"id":"java/android/missing-certificate-pinning","name":"java/android/missing-certificate-pinning","shortDescription":{"text":"Android missing certificate pinning"},"fullDescription":{"text":"Network connections that do not use certificate pinning may allow attackers to eavesdrop on communications."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-295"],"description":"Network connections that do not use certificate pinning may allow attackers to eavesdrop on communications.","id":"java/android/missing-certificate-pinning","kind":"problem","name":"Android missing certificate pinning","precision":"medium","problem.severity":"warning","security-severity":"5.9"}},{"id":"java/unreachable-exit-in-loop","name":"java/unreachable-exit-in-loop","shortDescription":{"text":"Loop with unreachable exit condition"},"fullDescription":{"text":"An iteration or loop with an exit condition that cannot be reached is an indication of faulty logic and can likely lead to infinite looping."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-835"],"description":"An iteration or loop with an exit condition that cannot be\n              reached is an indication of faulty logic and can likely lead to infinite\n              looping.","id":"java/unreachable-exit-in-loop","kind":"problem","name":"Loop with unreachable exit condition","precision":"medium","problem.severity":"warning","security-severity":"7.5"}},{"id":"java/improper-validation-of-array-index","name":"java/improper-validation-of-array-index","shortDescription":{"text":"Improper validation of user-provided array index"},"fullDescription":{"text":"Using external input as an index to an array, without proper validation, can lead to index out of bound exceptions."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-129"],"description":"Using external input as an index to an array, without proper validation, can lead to index out of bound exceptions.","id":"java/improper-validation-of-array-index","kind":"path-problem","name":"Improper validation of user-provided array index","precision":"medium","problem.severity":"warning","security-severity":"8.8"}},{"id":"java/improper-validation-of-array-construction","name":"java/improper-validation-of-array-construction","shortDescription":{"text":"Improper validation of user-provided size used for array construction"},"fullDescription":{"text":"Using unvalidated external input as the argument to a construction of an array can lead to index out of bound exceptions."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-129"],"description":"Using unvalidated external input as the argument to a construction of an array can lead to index out of bound exceptions.","id":"java/improper-validation-of-array-construction","kind":"path-problem","name":"Improper validation of user-provided size used for array construction","precision":"medium","problem.severity":"warning","security-severity":"8.8"}},{"id":"java/cleartext-storage-in-properties","name":"java/cleartext-storage-in-properties","shortDescription":{"text":"Cleartext storage of sensitive information using 'Properties' class"},"fullDescription":{"text":"Storing sensitive information in cleartext can expose it to an attacker."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-313"],"description":"Storing sensitive information in cleartext can expose it to an attacker.","id":"java/cleartext-storage-in-properties","kind":"problem","name":"Cleartext storage of sensitive information using 'Properties' class","precision":"medium","problem.severity":"warning","security-severity":"7.5"}},{"id":"java/android/cleartext-storage-filesystem","name":"java/android/cleartext-storage-filesystem","shortDescription":{"text":"Cleartext storage of sensitive information in the Android filesystem"},"fullDescription":{"text":"Cleartext storage of sensitive information in the Android filesystem allows access for users with root privileges or unexpected exposure from chained vulnerabilities."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-312"],"description":"Cleartext storage of sensitive information in the Android filesystem\n              allows access for users with root privileges or unexpected exposure\n              from chained vulnerabilities.","id":"java/android/cleartext-storage-filesystem","kind":"problem","name":"Cleartext storage of sensitive information in the Android filesystem","precision":"medium","problem.severity":"warning","security-severity":"7.5"}},{"id":"java/android/cleartext-storage-shared-prefs","name":"java/android/cleartext-storage-shared-prefs","shortDescription":{"text":"Cleartext storage of sensitive information using `SharedPreferences` on Android"},"fullDescription":{"text":"Cleartext Storage of Sensitive Information using SharedPreferences on Android allows access for users with root privileges or unexpected exposure from chained vulnerabilities."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-312"],"description":"Cleartext Storage of Sensitive Information using\n              SharedPreferences on Android allows access for users with root\n              privileges or unexpected exposure from chained vulnerabilities.","id":"java/android/cleartext-storage-shared-prefs","kind":"problem","name":"Cleartext storage of sensitive information using `SharedPreferences` on Android","precision":"medium","problem.severity":"warning","security-severity":"7.5"}},{"id":"java/android/cleartext-storage-database","name":"java/android/cleartext-storage-database","shortDescription":{"text":"Cleartext storage of sensitive information using a local database on Android"},"fullDescription":{"text":"Cleartext Storage of Sensitive Information using a local database on Android allows access for users with root privileges or unexpected exposure from chained vulnerabilities."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-312"],"description":"Cleartext Storage of Sensitive Information using\n              a local database on Android allows access for users with root\n              privileges or unexpected exposure from chained vulnerabilities.","id":"java/android/cleartext-storage-database","kind":"problem","name":"Cleartext storage of sensitive information using a local database on Android","precision":"medium","problem.severity":"warning","security-severity":"7.5"}},{"id":"java/android/unsafe-android-webview-fetch","name":"java/android/unsafe-android-webview-fetch","shortDescription":{"text":"Unsafe resource fetching in Android WebView"},"fullDescription":{"text":"JavaScript rendered inside WebViews can access protected application files and web resources from any origin exposing them to attack."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-749","external/cwe/cwe-079"],"description":"JavaScript rendered inside WebViews can access protected\n              application files and web resources from any origin exposing them to attack.","id":"java/android/unsafe-android-webview-fetch","kind":"path-problem","name":"Unsafe resource fetching in Android WebView","precision":"medium","problem.severity":"warning","security-severity":"6.1"}},{"id":"java/hardcoded-credential-api-call","name":"java/hardcoded-credential-api-call","shortDescription":{"text":"Hard-coded credential in API call"},"fullDescription":{"text":"Using a hard-coded credential in a call to a sensitive Java API may compromise security."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-798"],"description":"Using a hard-coded credential in a call to a sensitive Java API may compromise security.","id":"java/hardcoded-credential-api-call","kind":"path-problem","name":"Hard-coded credential in API call","precision":"medium","problem.severity":"error","security-severity":"9.8"}},{"id":"java/sensitive-log","name":"java/sensitive-log","shortDescription":{"text":"Insertion of sensitive information into log files"},"fullDescription":{"text":"Writing sensitive information to log files can allow that information to be leaked to an attacker more easily."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-532"],"description":"Writing sensitive information to log files can allow that\n              information to be leaked to an attacker more easily.","id":"java/sensitive-log","kind":"path-problem","name":"Insertion of sensitive information into log files","precision":"medium","problem.severity":"warning","security-severity":"7.5"}},{"id":"java/relative-path-command","name":"java/relative-path-command","shortDescription":{"text":"Executing a command with a relative path"},"fullDescription":{"text":"Executing a command with a relative path is vulnerable to malicious changes in the PATH environment variable."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-078","external/cwe/cwe-088"],"description":"Executing a command with a relative path is vulnerable to\n              malicious changes in the PATH environment variable.","id":"java/relative-path-command","kind":"problem","name":"Executing a command with a relative path","precision":"medium","problem.severity":"warning","security-severity":"5.4"}},{"id":"java/exec-tainted-environment","name":"java/exec-tainted-environment","shortDescription":{"text":"Building a command with an injected environment variable"},"fullDescription":{"text":"Passing environment variables containing externally controlled strings to a command line is vulnerable to malicious changes to the environment of a subprocess."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-078","external/cwe/cwe-088","external/cwe/cwe-454"],"description":"Passing environment variables containing externally controlled\n              strings to a command line is vulnerable to malicious changes to the\n              environment of a subprocess.","id":"java/exec-tainted-environment","kind":"path-problem","name":"Building a command with an injected environment variable","precision":"medium","problem.severity":"error","security-severity":"9.8"}},{"id":"java/partial-path-traversal","name":"java/partial-path-traversal","shortDescription":{"text":"Partial path traversal vulnerability"},"fullDescription":{"text":"A prefix used to check that a canonicalised path falls within another must be slash-terminated."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-023"],"description":"A prefix used to check that a canonicalised path falls within another must be slash-terminated.","id":"java/partial-path-traversal","kind":"problem","name":"Partial path traversal vulnerability","precision":"medium","problem.severity":"error","security-severity":"9.3"}},{"id":"java/android/websettings-javascript-enabled","name":"java/android/websettings-javascript-enabled","shortDescription":{"text":"Android WebView JavaScript settings"},"fullDescription":{"text":"Enabling JavaScript execution in a WebView can result in cross-site scripting attacks."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-079"],"description":"Enabling JavaScript execution in a WebView can result in cross-site scripting attacks.","id":"java/android/websettings-javascript-enabled","kind":"problem","name":"Android WebView JavaScript settings","precision":"medium","problem.severity":"warning","security-severity":"6.1"}},{"id":"java/android/webview-addjavascriptinterface","name":"java/android/webview-addjavascriptinterface","shortDescription":{"text":"Access Java object methods through JavaScript exposure"},"fullDescription":{"text":"Exposing a Java object in a WebView with a JavaScript interface can lead to malicious JavaScript controlling the application."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-079"],"description":"Exposing a Java object in a WebView with a JavaScript interface can lead to malicious JavaScript controlling the application.","id":"java/android/webview-addjavascriptinterface","kind":"problem","name":"Access Java object methods through JavaScript exposure","precision":"medium","problem.severity":"warning","security-severity":"6.1"}},{"id":"java/android/insecure-local-key-gen","name":"java/android/insecure-local-key-gen","shortDescription":{"text":"Insecurely generated keys for local authentication"},"fullDescription":{"text":"Generation of keys with insecure parameters for local biometric authentication can allow attackers with physical access to bypass authentication checks."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-287"],"description":"Generation of keys with insecure parameters for local biometric authentication can allow attackers with physical access to bypass authentication checks.","id":"java/android/insecure-local-key-gen","kind":"problem","name":"Insecurely generated keys for local authentication","precision":"medium","problem.severity":"warning","security-severity":"4.4"}},{"id":"java/unsafe-cert-trust","name":"java/unsafe-cert-trust","shortDescription":{"text":"Unsafe certificate trust"},"fullDescription":{"text":"SSLSocket/SSLEngine ignores all SSL certificate validation errors when establishing an HTTPS connection, thereby making the app vulnerable to man-in-the-middle attacks."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-273"],"description":"SSLSocket/SSLEngine ignores all SSL certificate validation\n              errors when establishing an HTTPS connection, thereby making\n              the app vulnerable to man-in-the-middle attacks.","id":"java/unsafe-cert-trust","kind":"problem","name":"Unsafe certificate trust","precision":"medium","problem.severity":"warning","security-severity":"9.8"}},{"id":"java/unreleased-lock","name":"java/unreleased-lock","shortDescription":{"text":"Unreleased lock"},"fullDescription":{"text":"A lock that is acquired one or more times without a matching number of unlocks may cause a deadlock."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["reliability","security","external/cwe/cwe-764","external/cwe/cwe-833"],"description":"A lock that is acquired one or more times without a matching number of unlocks\n              may cause a deadlock.","id":"java/unreleased-lock","kind":"problem","name":"Unreleased lock","precision":"medium","problem.severity":"error","security-severity":"5.0"}},{"id":"java/summary/lines-of-code-kotlin","name":"java/summary/lines-of-code-kotlin","shortDescription":{"text":"Total lines of Kotlin code in the database"},"fullDescription":{"text":"The total number of lines of code across all Kotlin files. This is a useful metric of the size of a database. For all Kotlin files that were seen during the build, this query counts the lines of code, excluding whitespace or comments."},"defaultConfiguration":{"enabled":true},"properties":{"tags":["summary"],"description":"The total number of lines of code across all Kotlin files. This is a useful metric of the size of a database.\n              For all Kotlin files that were seen during the build, this query counts the lines of code, excluding whitespace\n              or comments.","id":"java/summary/lines-of-code-kotlin","kind":"metric","name":"Total lines of Kotlin code in the database"}},{"id":"java/summary/lines-of-code","name":"java/summary/lines-of-code","shortDescription":{"text":"Total lines of Java/Kotlin code in the database"},"fullDescription":{"text":"The total number of lines of code across all Java and Kotlin files. This is a useful metric of the size of a database. For all source files that were seen during the build, this query counts the lines of code, excluding whitespace or comments."},"defaultConfiguration":{"enabled":true},"properties":{"tags":["summary","lines-of-code","debug"],"description":"The total number of lines of code across all Java and Kotlin files. This is a useful metric of the size of a database.\n              For all source files that were seen during the build, this query counts the lines of code, excluding whitespace\n              or comments.","id":"java/summary/lines-of-code","kind":"metric","name":"Total lines of Java/Kotlin code in the database"}},{"id":"java/summary/lines-of-code-java","name":"java/summary/lines-of-code-java","shortDescription":{"text":"Total lines of Java code in the database"},"fullDescription":{"text":"The total number of lines of code across all Java files. This is a useful metric of the size of a database. For all Java files that were seen during the build, this query counts the lines of code, excluding whitespace or comments."},"defaultConfiguration":{"enabled":true},"properties":{"tags":["summary"],"description":"The total number of lines of code across all Java files. This is a useful metric of the size of a database.\n              For all Java files that were seen during the build, this query counts the lines of code, excluding whitespace\n              or comments.","id":"java/summary/lines-of-code-java","kind":"metric","name":"Total lines of Java code in the database"}},{"id":"java/telemetry/supported-external-api-taint","name":"java/telemetry/supported-external-api-taint","shortDescription":{"text":"Supported flow steps in external libraries"},"fullDescription":{"text":"A list of 3rd party APIs detected as flow steps. Excludes test and generated code."},"defaultConfiguration":{"enabled":true},"properties":{"tags":["summary","telemetry"],"description":"A list of 3rd party APIs detected as flow steps. Excludes test and generated code.","id":"java/telemetry/supported-external-api-taint","kind":"metric","name":"Supported flow steps in external libraries"}},{"id":"java/telemetry/unsupported-external-api","name":"java/telemetry/unsupported-external-api","shortDescription":{"text":"Usage of unsupported APIs coming from external libraries"},"fullDescription":{"text":"A list of 3rd party APIs used in the codebase. Excludes test and generated code."},"defaultConfiguration":{"enabled":true},"properties":{"tags":["summary","telemetry"],"description":"A list of 3rd party APIs used in the codebase. Excludes test and generated code.","id":"java/telemetry/unsupported-external-api","kind":"metric","name":"Usage of unsupported APIs coming from external libraries"}},{"id":"java/telemetry/supported-external-api-sources","name":"java/telemetry/supported-external-api-sources","shortDescription":{"text":"Supported sources in external libraries"},"fullDescription":{"text":"A list of 3rd party APIs detected as sources. Excludes test and generated code."},"defaultConfiguration":{"enabled":true},"properties":{"tags":["summary","telemetry"],"description":"A list of 3rd party APIs detected as sources. Excludes test and generated code.","id":"java/telemetry/supported-external-api-sources","kind":"metric","name":"Supported sources in external libraries"}},{"id":"java/telemetry/external-libs","name":"java/telemetry/external-libs","shortDescription":{"text":"External libraries"},"fullDescription":{"text":"A list of external libraries used in the code"},"defaultConfiguration":{"enabled":true},"properties":{"tags":["summary","telemetry"],"description":"A list of external libraries used in the code","id":"java/telemetry/external-libs","kind":"metric","name":"External libraries"}},{"id":"java/telemetry/supported-external-api-sinks","name":"java/telemetry/supported-external-api-sinks","shortDescription":{"text":"Supported sinks in external libraries"},"fullDescription":{"text":"A list of 3rd party APIs detected as sinks. Excludes test and generated code."},"defaultConfiguration":{"enabled":true},"properties":{"tags":["summary","telemetry"],"description":"A list of 3rd party APIs detected as sinks. Excludes test and generated code.","id":"java/telemetry/supported-external-api-sinks","kind":"metric","name":"Supported sinks in external libraries"}},{"id":"java/telemetry/extraction-information","name":"java/telemetry/extraction-information","shortDescription":{"text":"Java extraction information"},"fullDescription":{"text":"Information about the extraction for a Java database"},"defaultConfiguration":{"enabled":true},"properties":{"tags":["summary","telemetry"],"description":"Information about the extraction for a Java database","id":"java/telemetry/extraction-information","kind":"metric","name":"Java extraction information"}},{"id":"java/telemetry/supported-external-api","name":"java/telemetry/supported-external-api","shortDescription":{"text":"Usage of supported APIs coming from external libraries"},"fullDescription":{"text":"A list of supported 3rd party APIs used in the codebase. Excludes test and generated code."},"defaultConfiguration":{"enabled":true},"properties":{"tags":["summary","telemetry"],"description":"A list of supported 3rd party APIs used in the codebase. Excludes test and generated code.","id":"java/telemetry/supported-external-api","kind":"metric","name":"Usage of supported APIs coming from external libraries"}},{"id":"java/sap/security/deprecated-jdom","name":"java/sap/security/deprecated-jdom","shortDescription":{"text":"Deprecated JDOM XML parser"},"fullDescription":{"text":"The JDOM XML parser is obsolete and no longer receives security fixes. Please replace it with another XML parser."},"defaultConfiguration":{"enabled":true,"level":"error"},"help":{"text":"# Deprecated JDOM XML parser\nThe JDOM XML parser is obsolete and is no longer maintained. It has unfixed security vulnerabilities, e.g., [CVE-2021-33813](https://alephsecurity.com/vulns/aleph-2021003)\n\n\n## Recommendation\nPlease replace the JDOM XML parser with another, non-obsolete XML parser.\n\n","markdown":"# Deprecated JDOM XML parser\nThe JDOM XML parser is obsolete and is no longer maintained. It has unfixed security vulnerabilities, e.g., [CVE-2021-33813](https://alephsecurity.com/vulns/aleph-2021003)\n\n\n## Recommendation\nPlease replace the JDOM XML parser with another, non-obsolete XML parser.\n\n"},"properties":{"tags":["security","external/cwe/cwe-1104"],"description":"The JDOM XML parser is obsolete and no longer receives security fixes. Please replace it with another XML parser.","id":"java/sap/security/deprecated-jdom","kind":"problem","name":"Deprecated JDOM XML parser","precision":"high","problem.severity":"error","security-severity":"7.5"}},{"id":"java/log-injection","name":"java/log-injection","shortDescription":{"text":"Log Injection"},"fullDescription":{"text":"Building log entries from non-encoded untrusted data may allow injection of fake or malicious log entries."},"defaultConfiguration":{"enabled":true,"level":"error"},"help":{"text":"# Log Injection\nIf untrusted input is written to a log without prior encoding of that data into a limited safe set of characters, an attacker providing specially crafted input may be able to create fake or malicious log entries.\n\nA log injection vulnerability occurs when an application writes untrusted data to a log without applying controls to the content of that data. By injecting specific characters or sequences of characters, an attacker can fake log entries for events that did not happen or create malicious log entries that may confuse log readers, undermine forensics, exploit potential vulnerabilities in log-processing systems, and potentially bypass logging-related security mechanisms.\n\nVarious kinds of dangerous content can be injected, as shown in the following table. For the first three, we have created short demonstration videos:\n\n* [Demo: newlines (0:53)](https://video.sap.com/media/t/1_l05x7x23)\n* [Demo: ANSI sequences (0:58)](https://video.sap.com/media/t/1_qjgc6vmf)\n* [Demo: JavaScript (1:12)](https://video.sap.com/media/t/1_m7hwjfqg)\n<table><tbody> <tr><th>character class </th><th> potential impact </th><th>affected log layout</th><th> malicious input example (plain text)</th></tr> <tr><td>newlines </td><td> create fake log entries</td><td>pattern layout</td><td><i>newline</i></td></tr> <tr><td>ANSI sequences </td><td> hide log entries in a terminal </td><td>any layout</td><td> <code>^\\[\\[2K^\\[\\[1A</code></td></tr> <tr><td>JavaScript </td><td> exploit potential XSS in log dashboards </td><td>any layout</td><td> <code>&lt;img src=1 onerror=\"javascript:alert('pwned')\"&gt;</code></td></tr> <tr><td>Unicode </td><td> undermine forensics (via strings that differ but look the same) </td><td>any layout</td><td> <code>admin</code> vs <code>аdmin</code></td></tr> <tr><td>lookup expressions </td><td> exploit potential vulnerabilities in the logging library </td><td>any layout</td><td> <code>${jndi:ldap:...}</code></td></tr> </tbody></table>\n\n## Avoiding Common Misconceptions\n* Log injection is not about accidentally logging secret or sensitive information. These are two different vulnerabilities.\n* Access control to the logs does not prevent log injection in any way. In particular, an attacker does not need access to the log to exploit log injection.\n* Structured layouts (e.g., JSON) do not completely prevent log injection. They typically prevent creation of fake log entries, though.\n\n## Recommendation\nUntrusted input should be neutralized before being written to a log entry, ideally in a way that is reversible and that neutralizes as many potentially dangerous character kinds as possible.\n\nThe best way to neutralize untrusted data before logging is to encode it into a safe subset of printable characters (ideally, US-ASCII). A good choice of encoding is URL-encoding, as it reversibly neutralizes various classes of potentially problematic characters.\n\nEncoding can be inserted at the point of logging or as part of configuring the log layout. The details of the latter approach depend on the particular logging library and the logging format.\n\nPlease note that logging using a JSON log layout is immune to creation of fake log entries as the layout automatically encodes the characters that have special meaning in JSON. It does not mitigate other log injection risks, and additional encoding is typically necessary in order to neutralize other potentially dangerous characters.\n\nPlease also note that data from untrusted inputs can easily end up in exception messages and data structures associated with logging events (ThreadContext, MDC, etc.). It is recommended to encode this data before logging too.\n\n\n## Example\nIn the code example, a username, provided by the user, is logged using `logger.warn` (from `org.slf4j.Logger`).\n\nIn the `/bad` endpoint, the username is logged without any security controls, enabling injection of malicious strings as described and demonstrated above.\n\nIn the `/good` endpoint, `URLEncode.encode()` is used to encode the user input before logging. All above-mentioned log injection attacks are neutralized and the logs are safe to process, while the original data is preserved due to the reversible encoding format.\n\n\n```java\npackage com.example.restservice;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\n\n@RestController\npublic class LogInjection {\n\n    private final Logger log = LoggerFactory.getLogger(LogInjection.class);\n\n    @GetMapping(\"/bad\")\n    public String bad(@RequestParam(\"username\") String username) {\n        log.warn(\"User:'{}'\", username);\n        return username;\n    }\n\n    @GetMapping(\"/good\")\n    public String good(@RequestParam(\"username\") String username) {\n        String encodedUsername = URLEncoder.encode(username, StandardCharsets.UTF_8); // Java 11+\n        log.warn(\"User:'{}'\", encodedUsername);\n        return username;\n    }\n}\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Klebanov, Vladimir: [Log Injection - See and Understand the Vulnerability](https://github.com/vlkl-sap/log-injection-demo).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","markdown":"# Log Injection\nIf untrusted input is written to a log without prior encoding of that data into a limited safe set of characters, an attacker providing specially crafted input may be able to create fake or malicious log entries.\n\nA log injection vulnerability occurs when an application writes untrusted data to a log without applying controls to the content of that data. By injecting specific characters or sequences of characters, an attacker can fake log entries for events that did not happen or create malicious log entries that may confuse log readers, undermine forensics, exploit potential vulnerabilities in log-processing systems, and potentially bypass logging-related security mechanisms.\n\nVarious kinds of dangerous content can be injected, as shown in the following table. For the first three, we have created short demonstration videos:\n\n* [Demo: newlines (0:53)](https://video.sap.com/media/t/1_l05x7x23)\n* [Demo: ANSI sequences (0:58)](https://video.sap.com/media/t/1_qjgc6vmf)\n* [Demo: JavaScript (1:12)](https://video.sap.com/media/t/1_m7hwjfqg)\n<table><tbody> <tr><th>character class </th><th> potential impact </th><th>affected log layout</th><th> malicious input example (plain text)</th></tr> <tr><td>newlines </td><td> create fake log entries</td><td>pattern layout</td><td><i>newline</i></td></tr> <tr><td>ANSI sequences </td><td> hide log entries in a terminal </td><td>any layout</td><td> <code>^\\[\\[2K^\\[\\[1A</code></td></tr> <tr><td>JavaScript </td><td> exploit potential XSS in log dashboards </td><td>any layout</td><td> <code>&lt;img src=1 onerror=\"javascript:alert('pwned')\"&gt;</code></td></tr> <tr><td>Unicode </td><td> undermine forensics (via strings that differ but look the same) </td><td>any layout</td><td> <code>admin</code> vs <code>аdmin</code></td></tr> <tr><td>lookup expressions </td><td> exploit potential vulnerabilities in the logging library </td><td>any layout</td><td> <code>${jndi:ldap:...}</code></td></tr> </tbody></table>\n\n## Avoiding Common Misconceptions\n* Log injection is not about accidentally logging secret or sensitive information. These are two different vulnerabilities.\n* Access control to the logs does not prevent log injection in any way. In particular, an attacker does not need access to the log to exploit log injection.\n* Structured layouts (e.g., JSON) do not completely prevent log injection. They typically prevent creation of fake log entries, though.\n\n## Recommendation\nUntrusted input should be neutralized before being written to a log entry, ideally in a way that is reversible and that neutralizes as many potentially dangerous character kinds as possible.\n\nThe best way to neutralize untrusted data before logging is to encode it into a safe subset of printable characters (ideally, US-ASCII). A good choice of encoding is URL-encoding, as it reversibly neutralizes various classes of potentially problematic characters.\n\nEncoding can be inserted at the point of logging or as part of configuring the log layout. The details of the latter approach depend on the particular logging library and the logging format.\n\nPlease note that logging using a JSON log layout is immune to creation of fake log entries as the layout automatically encodes the characters that have special meaning in JSON. It does not mitigate other log injection risks, and additional encoding is typically necessary in order to neutralize other potentially dangerous characters.\n\nPlease also note that data from untrusted inputs can easily end up in exception messages and data structures associated with logging events (ThreadContext, MDC, etc.). It is recommended to encode this data before logging too.\n\n\n## Example\nIn the code example, a username, provided by the user, is logged using `logger.warn` (from `org.slf4j.Logger`).\n\nIn the `/bad` endpoint, the username is logged without any security controls, enabling injection of malicious strings as described and demonstrated above.\n\nIn the `/good` endpoint, `URLEncode.encode()` is used to encode the user input before logging. All above-mentioned log injection attacks are neutralized and the logs are safe to process, while the original data is preserved due to the reversible encoding format.\n\n\n```java\npackage com.example.restservice;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\n\n@RestController\npublic class LogInjection {\n\n    private final Logger log = LoggerFactory.getLogger(LogInjection.class);\n\n    @GetMapping(\"/bad\")\n    public String bad(@RequestParam(\"username\") String username) {\n        log.warn(\"User:'{}'\", username);\n        return username;\n    }\n\n    @GetMapping(\"/good\")\n    public String good(@RequestParam(\"username\") String username) {\n        String encodedUsername = URLEncoder.encode(username, StandardCharsets.UTF_8); // Java 11+\n        log.warn(\"User:'{}'\", encodedUsername);\n        return username;\n    }\n}\n\n```\n\n## References\n* OWASP: [Log Injection](https://owasp.org/www-community/attacks/Log_Injection).\n* Klebanov, Vladimir: [Log Injection - See and Understand the Vulnerability](https://github.com/vlkl-sap/log-injection-demo).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n"},"properties":{"tags":["security","external/cwe/cwe-117"],"description":"Building log entries from non-encoded untrusted data\n              may allow injection of fake or malicious log entries.","id":"java/log-injection","kind":"path-problem","name":"Log Injection","precision":"high","problem.severity":"error","security-severity":"7.8"}},{"id":"java/sap/security/custom-trust-strategy","name":"java/sap/security/custom-trust-strategy","shortDescription":{"text":"`TrustStrategy` Custom Implementation"},"fullDescription":{"text":"Trusting all certificates allows an attacker to perform a machine-in-the-middle attack."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security","external/cwe/cwe-295"],"description":"Trusting all certificates allows an attacker to perform a machine-in-the-middle attack.","id":"java/sap/security/custom-trust-strategy","kind":"problem","name":"`TrustStrategy` Custom Implementation","precision":"low","problem.severity":"warning","security-severity":"2.0"}},{"id":"java/sap/security/jxpath-code-injection","name":"java/sap/security/jxpath-code-injection","shortDescription":{"text":"JxPath Code Injection"},"defaultConfiguration":{"enabled":true,"level":"error"},"help":{"text":"# JxPath Code Injection\nXPath expressions can contain Java functions that will be executed by JXPath in the application context and allow an attacker to execute arbitrary code. For example, the attacker can send the following payload: `?path=java.lang.System.exit(42)` and shut down the application.\n\n\n## Recommendation\nTo avoid executing arbitrary code by JXPath, you should use `pathContext.setFunctions(new FunctionLibrary())`, this will replace the list of allowed functions with an empty list, so the exploit payloads like the one mentioned above will not work.\n\nAlso, in cases where a child JXPath context is created from a parent context using the function `JXPathContext.newContext(JXPathContext, Object)`, the mitigation `setFunction(new FunctionLibrary())` should be called on the parent context. Otherwise, the child context will be vulnerable.\n\nIf the provided recommendations are not applicable, use strict input validation/allowlisting. Avoid passing untrusted XPath expressions to the JXPath APIs.\n\n\n## References\n* [Remote Code Execution in JXPath Library (CVE-2022-41852)](https://hackinglab.cz/en/blog/remote-code-execution-in-jxpath-library-cve-2022-41852)\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n","markdown":"# JxPath Code Injection\nXPath expressions can contain Java functions that will be executed by JXPath in the application context and allow an attacker to execute arbitrary code. For example, the attacker can send the following payload: `?path=java.lang.System.exit(42)` and shut down the application.\n\n\n## Recommendation\nTo avoid executing arbitrary code by JXPath, you should use `pathContext.setFunctions(new FunctionLibrary())`, this will replace the list of allowed functions with an empty list, so the exploit payloads like the one mentioned above will not work.\n\nAlso, in cases where a child JXPath context is created from a parent context using the function `JXPathContext.newContext(JXPathContext, Object)`, the mitigation `setFunction(new FunctionLibrary())` should be called on the parent context. Otherwise, the child context will be vulnerable.\n\nIf the provided recommendations are not applicable, use strict input validation/allowlisting. Avoid passing untrusted XPath expressions to the JXPath APIs.\n\n\n## References\n* [Remote Code Execution in JXPath Library (CVE-2022-41852)](https://hackinglab.cz/en/blog/remote-code-execution-in-jxpath-library-cve-2022-41852)\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n"},"properties":{"tags":["security","external/cwe/cwe-094"],"id":"java/sap/security/jxpath-code-injection","kind":"path-problem","name":"JxPath Code Injection","precision":"medium","problem.severity":"error","security-severity":"9.8"}},{"id":"java/sap/security/web-xml/http-verb-tampering","name":"java/sap/security/web-xml/http-verb-tampering","shortDescription":{"text":"SAP HTTP Verb Tampering"},"fullDescription":{"text":"Security constraints that specify HTTP verbs often allow more access than intended."},"defaultConfiguration":{"enabled":true,"level":"error"},"help":{"text":"# SAP HTTP Verb Tampering\nAn application's authentication and authorization mechanisms can be bypassed with HTTP verb tampering when:\n\n1. It uses a security control that lists HTTP verbs.\n1. The security control fails to block verbs that are not listed.\n1. The application updates its state based on GET requests or other arbitrary HTTP verbs.\n\n\nMost Java EE implementations allow HTTP methods that are not explicitly listed in the configuration. For example the following security constraint is applied to the HTTP GET method but not other HTTP verbs:\n\n\n```xml\n            <security-constraint>\n                <display-name>Admin Constraint</display-name>\n                <web-resource-collection>\n                    <web-resource-name>Admin Area</web-resource-name>\n                    <url-pattern>/pages/index.jsp</url-pattern>\n                    <url-pattern>/admin/*.do</url-pattern>\n                    <http-method>GET</http-method>\n                    <http-method>POST</http-method>\n                </web-resource-collection>\n                <auth-constraint>\n                    <description>only admin</description>\n                    <role-name>admin</role-name>\n                </auth-constraint>\n            </security-constraint>\n```\nSince verbs like HEAD are not explicitly defined in an `<http-method>` tag in this configuration, it might be possible to exercise administrative functionality by substituting GET or POST requests with HEAD requests. For HEAD requests to exercise administrative functionality, condition 3 must hold - the application must carry out commands based on verbs other than POST. Some web/application servers will accept arbitrary non-standard HTTP verbs and respond as if they were given a GET request. If that is the case, an attacker would be able to view administrative pages by using an arbitrary verb in a request.\n\nFor example, a typically client GET requests looks like:\n\n```java\n\nGET /admin/viewUsers.do HTTP/1.1\nHost: www.example.com\n        \n```\nIn an HTTP Verb Tampering attack, an attacker would substitute GET with something like `FOO`\n\n```java\n\nFOO /admin/viewUsers.do HTTP/1.1\nHost: www.example.com\n        \n```\nAt it's core, this vulnerability is the result of an attempt to create a blacklist - a policy that specifies what users are not allowed to do. Blacklists rarely achieve their intended effect.\n\n\n## Recommendation\nSAP specific solution recommendation are described on the following Wiki page: https://wiki.one.int.sap/wiki/display/IMSSec/HTTP+Verb+Tampering\n\nPlease follow this for SAP specific recommendations.\n\n\n\nIn more general the recommendation is to use a whitelist rather than a blacklist. Specify an authorization policy that lists only what should be allowed and denies everything else. Do not specify HTTP methods in security constraints. This will ensure your security constraints are applied to all HTTP verbs.\n\nFor example, the following configuration applies the security constraint to all HTTP verbs:\n\n\n```xml\n<security-constraint>\n    <display-name>Admin Constraint</display-name>\n    <web-resource-collection>\n        <web-resource-name>Admin Area</web-resource-name>\n        <url-pattern>/pages/index.jsp</url-pattern>\n        <url-pattern>/admin/*.do</url-pattern>\n    </web-resource-collection>\n    <auth-constraint>\n        <description>only admin</description>\n        <role-name>admin</role-name>\n    </auth-constraint>\n</security-constraint>\n```\n","markdown":"# SAP HTTP Verb Tampering\nAn application's authentication and authorization mechanisms can be bypassed with HTTP verb tampering when:\n\n1. It uses a security control that lists HTTP verbs.\n1. The security control fails to block verbs that are not listed.\n1. The application updates its state based on GET requests or other arbitrary HTTP verbs.\n\n\nMost Java EE implementations allow HTTP methods that are not explicitly listed in the configuration. For example the following security constraint is applied to the HTTP GET method but not other HTTP verbs:\n\n\n```xml\n            <security-constraint>\n                <display-name>Admin Constraint</display-name>\n                <web-resource-collection>\n                    <web-resource-name>Admin Area</web-resource-name>\n                    <url-pattern>/pages/index.jsp</url-pattern>\n                    <url-pattern>/admin/*.do</url-pattern>\n                    <http-method>GET</http-method>\n                    <http-method>POST</http-method>\n                </web-resource-collection>\n                <auth-constraint>\n                    <description>only admin</description>\n                    <role-name>admin</role-name>\n                </auth-constraint>\n            </security-constraint>\n```\nSince verbs like HEAD are not explicitly defined in an `<http-method>` tag in this configuration, it might be possible to exercise administrative functionality by substituting GET or POST requests with HEAD requests. For HEAD requests to exercise administrative functionality, condition 3 must hold - the application must carry out commands based on verbs other than POST. Some web/application servers will accept arbitrary non-standard HTTP verbs and respond as if they were given a GET request. If that is the case, an attacker would be able to view administrative pages by using an arbitrary verb in a request.\n\nFor example, a typically client GET requests looks like:\n\n```java\n\nGET /admin/viewUsers.do HTTP/1.1\nHost: www.example.com\n        \n```\nIn an HTTP Verb Tampering attack, an attacker would substitute GET with something like `FOO`\n\n```java\n\nFOO /admin/viewUsers.do HTTP/1.1\nHost: www.example.com\n        \n```\nAt it's core, this vulnerability is the result of an attempt to create a blacklist - a policy that specifies what users are not allowed to do. Blacklists rarely achieve their intended effect.\n\n\n## Recommendation\nSAP specific solution recommendation are described on the following Wiki page: https://wiki.one.int.sap/wiki/display/IMSSec/HTTP+Verb+Tampering\n\nPlease follow this for SAP specific recommendations.\n\n\n\nIn more general the recommendation is to use a whitelist rather than a blacklist. Specify an authorization policy that lists only what should be allowed and denies everything else. Do not specify HTTP methods in security constraints. This will ensure your security constraints are applied to all HTTP verbs.\n\nFor example, the following configuration applies the security constraint to all HTTP verbs:\n\n\n```xml\n<security-constraint>\n    <display-name>Admin Constraint</display-name>\n    <web-resource-collection>\n        <web-resource-name>Admin Area</web-resource-name>\n        <url-pattern>/pages/index.jsp</url-pattern>\n        <url-pattern>/admin/*.do</url-pattern>\n    </web-resource-collection>\n    <auth-constraint>\n        <description>only admin</description>\n        <role-name>admin</role-name>\n    </auth-constraint>\n</security-constraint>\n```\n"},"properties":{"tags":["security","external/cwe/cwe-650"],"description":"Security constraints that specify HTTP verbs often allow more access than intended.","id":"java/sap/security/web-xml/http-verb-tampering","kind":"problem","name":"SAP HTTP Verb Tampering","precision":"high","problem.severity":"error","security-severity":"6.0"}},{"id":"java/sap/security/apache-common-configuration","name":"java/sap/security/apache-common-configuration","shortDescription":{"text":"Settings Manipulation Apache Common Configuration"},"defaultConfiguration":{"enabled":true,"level":"error"},"help":{"text":"# Settings Manipulation Apache Common Configuration\nThis attack aims to modify application settings in order to cause misleading data or advantages on the attacker's behalf. They may manipulate values in the system and manage specific user resources of the application or affect its functionalities.\n\nAn attacker can exploit several functionalities of the application using this attack technique, but it would be not possible to describe all the ways of exploration, due to innumerable options that attacker may use to control the system values.\n\nPassing any user-supplied data to `FileBasedBuilderProperties` class functions allows an attacker to manipulate the application configuration.\n\nUsing this attack technique, it is possible to manipulate settings by changing the application functions, such as calls to the database, blocking access to external libraries, and/or modification log files.\n\nThe detected Setting Manipulation is version-independent. In addition to that, processing untrusted data with Apache Common Configuration of version before 2.8.0 can cause remote code execution. By default, Commons Configuration performs variable interpolation that allows properties to be dynamically evaluated and expanded. An attacker can provide a configuration property such as `${script:javascript:java.lang.Runtime.getRuntime().exec()}` to run arbitrary system commands when the property is retrieved.\n\n\n## Recommendation\nIn general, do not allow user-provided or otherwise untrusted data to control sensitive values or configuration files. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.\n\nUpdate library to version 2.8.0 or higher.\n\n\n## References\n* [OWASP Setting Manipulation Attack](https://owasp.org/www-community/attacks/Setting_Manipulation)\n* Common Weakness Enumeration: [CWE-15](https://cwe.mitre.org/data/definitions/15.html).\n","markdown":"# Settings Manipulation Apache Common Configuration\nThis attack aims to modify application settings in order to cause misleading data or advantages on the attacker's behalf. They may manipulate values in the system and manage specific user resources of the application or affect its functionalities.\n\nAn attacker can exploit several functionalities of the application using this attack technique, but it would be not possible to describe all the ways of exploration, due to innumerable options that attacker may use to control the system values.\n\nPassing any user-supplied data to `FileBasedBuilderProperties` class functions allows an attacker to manipulate the application configuration.\n\nUsing this attack technique, it is possible to manipulate settings by changing the application functions, such as calls to the database, blocking access to external libraries, and/or modification log files.\n\nThe detected Setting Manipulation is version-independent. In addition to that, processing untrusted data with Apache Common Configuration of version before 2.8.0 can cause remote code execution. By default, Commons Configuration performs variable interpolation that allows properties to be dynamically evaluated and expanded. An attacker can provide a configuration property such as `${script:javascript:java.lang.Runtime.getRuntime().exec()}` to run arbitrary system commands when the property is retrieved.\n\n\n## Recommendation\nIn general, do not allow user-provided or otherwise untrusted data to control sensitive values or configuration files. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.\n\nUpdate library to version 2.8.0 or higher.\n\n\n## References\n* [OWASP Setting Manipulation Attack](https://owasp.org/www-community/attacks/Setting_Manipulation)\n* Common Weakness Enumeration: [CWE-15](https://cwe.mitre.org/data/definitions/15.html).\n"},"properties":{"tags":["security","external/cwe/cwe-015"],"id":"java/sap/security/apache-common-configuration","kind":"path-problem","name":"Settings Manipulation Apache Common Configuration","precision":"high","problem.severity":"error","security-severity":"9.0"}},{"id":"java/sap/security/spring-security-context","name":"java/sap/security/spring-security-context","shortDescription":{"text":"Access Control: Spring Security Context"},"defaultConfiguration":{"enabled":true,"level":"error"},"help":{"text":"# Access Control: Spring Security Context\nWhen using Spring, a SecurityContext will be associated with a session and thus used in multiple theads. Therefore, the following idiom is unsafe:\n\n```java\n\n        Authentication old = SecurityContextHolder.getContext().getAuthentication();\n        try {\n            SecurityContextHolder.getContext().setAuthentication(...);\n            // ...privileged operation...\n        } finally {\n            SecurityContextHolder.getContext().setAuthentication(old);\n        }\n        \n```\nAnother thread handling a different request from the same user might momentarily get elevated permissions while performing unrelated operations.\n\n\n## Recommendation\nThe following, alternative idiom is safe:\n\n```java\n\n    SecurityContext old = SecurityContextHolder.getContext();\n    SecurityContextHolder.setContext(...);\n    try {\n        // ...privileged operation...\n    } finally {\n        SecurityContextHolder.setContext(old);\n    }\n    \n```\n\n## References\n* [ACEGI Security: avoid temporary calls to SecurityContextHolder.getContext().setAuthentication(...)](https://github.com/find-sec-bugs/find-sec-bugs/issues/8)\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html).\n","markdown":"# Access Control: Spring Security Context\nWhen using Spring, a SecurityContext will be associated with a session and thus used in multiple theads. Therefore, the following idiom is unsafe:\n\n```java\n\n        Authentication old = SecurityContextHolder.getContext().getAuthentication();\n        try {\n            SecurityContextHolder.getContext().setAuthentication(...);\n            // ...privileged operation...\n        } finally {\n            SecurityContextHolder.getContext().setAuthentication(old);\n        }\n        \n```\nAnother thread handling a different request from the same user might momentarily get elevated permissions while performing unrelated operations.\n\n\n## Recommendation\nThe following, alternative idiom is safe:\n\n```java\n\n    SecurityContext old = SecurityContextHolder.getContext();\n    SecurityContextHolder.setContext(...);\n    try {\n        // ...privileged operation...\n    } finally {\n        SecurityContextHolder.setContext(old);\n    }\n    \n```\n\n## References\n* [ACEGI Security: avoid temporary calls to SecurityContextHolder.getContext().setAuthentication(...)](https://github.com/find-sec-bugs/find-sec-bugs/issues/8)\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html).\n"},"properties":{"tags":["security","external/cwe/cwe-284"],"id":"java/sap/security/spring-security-context","kind":"problem","name":"Access Control: Spring Security Context","precision":"high","problem.severity":"error","security-severity":"8.5"}},{"id":"java/sap/security/outdated-library","name":"java/sap/security/outdated-library","shortDescription":{"text":"Deprecated library"},"fullDescription":{"text":"The library you are using has been deprecated and will not receive security fixes."},"defaultConfiguration":{"enabled":true,"level":"error"},"help":{"text":"# Deprecated library\nThe library you are using has been deprecated and will not receive security fixes. Its functionality may also no longer match the requirements of the environment. Please migrate to a supported replacement.\n\nAs announced in this [release note](https://help.sap.com/doc/43b304f99a8145809c78f292bfc0bc58/Cloud/en-US/98bf747111574187a7c76f8ced51cfeb.html?sel4=Cloud%20Foundry&sel1=Authorization%20and%20Trust%20Management&from=2020-06-02) the java-container-security Java client library is in maintenance mode.\n\nYou can expect fixes for security issues until mid of September 2020. The java-container-security libraries will not provide support for zone-enabled subaccounts as described [here (JAM Blog)](https://jam4.sapjam.com/questions/lOymSiHgg5eaplCCP6mmDB).\n\nYou are affected in case you need the `subaccountId` for metering and eventually in case you need the `zoneId` as tenant discriminator.\n\n\n## Recommendation\nPlease consult the [migration guide](https://github.wdf.sap.corp/pages/CPSecurity/Knowledge-Base/03_ApplicationSecurity/ClientLibraries/).\n\n","markdown":"# Deprecated library\nThe library you are using has been deprecated and will not receive security fixes. Its functionality may also no longer match the requirements of the environment. Please migrate to a supported replacement.\n\nAs announced in this [release note](https://help.sap.com/doc/43b304f99a8145809c78f292bfc0bc58/Cloud/en-US/98bf747111574187a7c76f8ced51cfeb.html?sel4=Cloud%20Foundry&sel1=Authorization%20and%20Trust%20Management&from=2020-06-02) the java-container-security Java client library is in maintenance mode.\n\nYou can expect fixes for security issues until mid of September 2020. The java-container-security libraries will not provide support for zone-enabled subaccounts as described [here (JAM Blog)](https://jam4.sapjam.com/questions/lOymSiHgg5eaplCCP6mmDB).\n\nYou are affected in case you need the `subaccountId` for metering and eventually in case you need the `zoneId` as tenant discriminator.\n\n\n## Recommendation\nPlease consult the [migration guide](https://github.wdf.sap.corp/pages/CPSecurity/Knowledge-Base/03_ApplicationSecurity/ClientLibraries/).\n\n"},"properties":{"tags":["security","external/cwe/cwe-1104"],"description":"The library you are using has been deprecated and will not receive security fixes.","id":"java/sap/security/outdated-library","kind":"problem","name":"Deprecated library","precision":"high","problem.severity":"error","security-severity":"9.0"}},{"id":"java/sap/security/cql-injection","name":"java/sap/security/cql-injection","shortDescription":{"text":"CQL Injection"},"defaultConfiguration":{"enabled":true,"level":"error"},"help":{"text":"# CQL Injection\nAn injection vulnerability occurs when:\n\n1. Data enters an application from an untrusted source.\n1. The data is used to dynamically construct a query. In this scenario, an attacker can modify the structure of the executed query by manipulating, e.g., the entity/table or element/column names used. This can lead to subverting the application logic, unintended data tampering, or disclosure.\n\n\nPlease note that the CAP framework does protect its consumers from some forms of SQL injection, but the protection does NOT cover the scenario highlighted by this finding.\n\n\n## Recommendation\nAvoid passing untrusted data to APIs determining the structure of the query. If unavoidable, use strict input validation/allowlisting. Contact the CAP team, if you have any questions.\n\n\n## Example\n**Example 1:** Consider the following query:\n\n`Select.from(x).columns(c).where(...)`\n\nIf `x` incorporates data from untrusted sources, an attacker can turn a query like `Select.from(Books)` into `Select.from(Employees)`. Similar scenarios are possible with other CDS APIs (`columns()`, etc.).\n\n**Example 2:** Consider the following query:\n\n`Update.entity(x).data(d).where(...)`\n\nIf `d` is a map with keys originating from an untrusted source, an attacker might be able to update elements that they are not supposed to (e.g., not just their `phone_number`, but also their `salary`).\n\n","markdown":"# CQL Injection\nAn injection vulnerability occurs when:\n\n1. Data enters an application from an untrusted source.\n1. The data is used to dynamically construct a query. In this scenario, an attacker can modify the structure of the executed query by manipulating, e.g., the entity/table or element/column names used. This can lead to subverting the application logic, unintended data tampering, or disclosure.\n\n\nPlease note that the CAP framework does protect its consumers from some forms of SQL injection, but the protection does NOT cover the scenario highlighted by this finding.\n\n\n## Recommendation\nAvoid passing untrusted data to APIs determining the structure of the query. If unavoidable, use strict input validation/allowlisting. Contact the CAP team, if you have any questions.\n\n\n## Example\n**Example 1:** Consider the following query:\n\n`Select.from(x).columns(c).where(...)`\n\nIf `x` incorporates data from untrusted sources, an attacker can turn a query like `Select.from(Books)` into `Select.from(Employees)`. Similar scenarios are possible with other CDS APIs (`columns()`, etc.).\n\n**Example 2:** Consider the following query:\n\n`Update.entity(x).data(d).where(...)`\n\nIf `d` is a map with keys originating from an untrusted source, an attacker might be able to update elements that they are not supposed to (e.g., not just their `phone_number`, but also their `salary`).\n\n"},"properties":{"tags":["security","external/cwe/cwe-089"],"id":"java/sap/security/cql-injection","kind":"path-problem","name":"CQL Injection","precision":"high","problem.severity":"error","security-severity":"8.8"}},{"id":"java/sap/security/p4rmi","name":"java/sap/security/p4rmi","shortDescription":{"text":"P4-RMI Access Control"},"fullDescription":{"text":"P4-RMI methods are designed to be called by remote entities. Without proper authentication and authorization checks in the method body, remote attackers can execute unintended actions within the application."},"defaultConfiguration":{"enabled":true,"level":"error"},"properties":{"tags":["security","external/cwe/cwe-284"],"description":"P4-RMI methods are designed to be called by remote entities. Without proper authentication and authorization checks in the method body, remote attackers can execute unintended actions within the application.","id":"java/sap/security/p4rmi","kind":"problem","name":"P4-RMI Access Control","precision":"medium","problem.severity":"error","security-severity":"8.0"}},{"id":"java/sap/security/deprecated-string-utils","name":"java/sap/security/deprecated-string-utils","shortDescription":{"text":"SAP Legacy API - StringUtils"},"fullDescription":{"text":"Legacy StringUtils API call has been detected."},"defaultConfiguration":{"enabled":true,"level":"warning"},"help":{"text":"# SAP Legacy API - StringUtils\nMost escaping methods of `com.sap.security.core.server.csi.util.StringUtils` class have been deprecated. Reason is that some of them (especially `escapeToURL` and `escapeToJS`) did not do their job correctly. In addition the old API structure did not fulfill requirements of decent standard defense mechanisms against XSS. To clean things up, a new XSS library was released by TIP Core CSI Security and Identity Management organization named XSS Encoder. Check https://wiki.wdf.sap.corp/wiki/display/NWCUIAMSIM/XSS+Secure+Programming+Guide, section 3.1.\n\nFor applications running on top of SAP NetWeaver AS Java the methods of `com.sap.security.core.server.csi.util.StringUtils` have been redirected internally to XSS Encoder by setting the System property `com.sap.security.xssencode` to value \"1\".\n\nTherefore usage of the `com.sap.security.core.server.csi.util.StringUtils` in SAP NetWeaver AS Java environment is by default still safe from security perspective despite being deprecated.\n\nFor environments other than SAP NetWeaver AS Java you should either replace the usage of the deprecated `com.sap.security.core.server.csi.util.StringUtils` API entirely or ensure that the System property `com.sap.security.xssencode` has the value \"1\" by setting it programmatically or via `-D` option on the command line configuration.\n\n\n## Recommendation\nUpgrade your SP stack to the required level. Details to be found at SAP Note 1590008. After the upgrade, existing `StringUtils` class will mostly act as wrapper for the new library. There is one difference to keep in mind, however: CASE3 (output is URL or CSS). New library has two use cases, since it turned out that URL and CSS (Cascading Style Sheets) can't handled with the same escaping. So existing `escapeToURL` calls must be handled with special care:\n\n1. Examine that output is really URL related. If not, use the new API for CSS (`XSSEncoder.encodeCSS`). If yes, encoding alone won't really protect the software from XSS attacks. URL must be validated additionally with the help of `URLChecker` class.\n1. Don't forget to have regression tests after upgrading. Once your customer upgraded NW stack to an SP which already contains the new API, there is no way back any longer. New implementation will be called behind the scenes even if your application still uses the old API calls - and this can't be configured.\n\n## References\n* [XSS Secure Programming Guide](https://wiki.wdf.sap.corp/wiki/display/NWCUIAMSIM/XSS+Secure+Programming+Guide).\n* Common Weakness Enumeration: [CWE-1104](https://cwe.mitre.org/data/definitions/1104.html).\n","markdown":"# SAP Legacy API - StringUtils\nMost escaping methods of `com.sap.security.core.server.csi.util.StringUtils` class have been deprecated. Reason is that some of them (especially `escapeToURL` and `escapeToJS`) did not do their job correctly. In addition the old API structure did not fulfill requirements of decent standard defense mechanisms against XSS. To clean things up, a new XSS library was released by TIP Core CSI Security and Identity Management organization named XSS Encoder. Check https://wiki.wdf.sap.corp/wiki/display/NWCUIAMSIM/XSS+Secure+Programming+Guide, section 3.1.\n\nFor applications running on top of SAP NetWeaver AS Java the methods of `com.sap.security.core.server.csi.util.StringUtils` have been redirected internally to XSS Encoder by setting the System property `com.sap.security.xssencode` to value \"1\".\n\nTherefore usage of the `com.sap.security.core.server.csi.util.StringUtils` in SAP NetWeaver AS Java environment is by default still safe from security perspective despite being deprecated.\n\nFor environments other than SAP NetWeaver AS Java you should either replace the usage of the deprecated `com.sap.security.core.server.csi.util.StringUtils` API entirely or ensure that the System property `com.sap.security.xssencode` has the value \"1\" by setting it programmatically or via `-D` option on the command line configuration.\n\n\n## Recommendation\nUpgrade your SP stack to the required level. Details to be found at SAP Note 1590008. After the upgrade, existing `StringUtils` class will mostly act as wrapper for the new library. There is one difference to keep in mind, however: CASE3 (output is URL or CSS). New library has two use cases, since it turned out that URL and CSS (Cascading Style Sheets) can't handled with the same escaping. So existing `escapeToURL` calls must be handled with special care:\n\n1. Examine that output is really URL related. If not, use the new API for CSS (`XSSEncoder.encodeCSS`). If yes, encoding alone won't really protect the software from XSS attacks. URL must be validated additionally with the help of `URLChecker` class.\n1. Don't forget to have regression tests after upgrading. Once your customer upgraded NW stack to an SP which already contains the new API, there is no way back any longer. New implementation will be called behind the scenes even if your application still uses the old API calls - and this can't be configured.\n\n## References\n* [XSS Secure Programming Guide](https://wiki.wdf.sap.corp/wiki/display/NWCUIAMSIM/XSS+Secure+Programming+Guide).\n* Common Weakness Enumeration: [CWE-1104](https://cwe.mitre.org/data/definitions/1104.html).\n"},"properties":{"tags":["security","external/cwe/cwe-1104"],"description":"Legacy StringUtils API call has been detected.","id":"java/sap/security/deprecated-string-utils","kind":"problem","name":"SAP Legacy API - StringUtils","precision":"high","problem.severity":"warning","security-severity":"5.0"}},{"id":"java/sap/security/web-xml/invoker-servlet","name":"java/sap/security/web-xml/invoker-servlet","shortDescription":{"text":"SAP Invoker Servlet Locally Enabled"},"fullDescription":{"text":"In production mode, EnableInvokerServletGlobally must be set to false and InvokerServletLocallyEnabled must not be configured."},"defaultConfiguration":{"enabled":true,"level":"warning"},"properties":{"tags":["security"],"description":"In production mode, EnableInvokerServletGlobally must be set to false and InvokerServletLocallyEnabled must not be configured.","id":"java/sap/security/web-xml/invoker-servlet","kind":"problem","name":"SAP Invoker Servlet Locally Enabled","precision":"high","problem.severity":"warning","security-severity":"4.0"}}]},"extensions":[{"name":"codeql/java-queries","semanticVersion":"1.0.2","locations":[{"uri":"file:///Users/I578094/Documents/codeql/qlpacks/codeql/java-queries/1.0.2/","description":{"text":"The QL pack root directory."}},{"uri":"file:///Users/I578094/Documents/codeql/qlpacks/codeql/java-queries/1.0.2/qlpack.yml","description":{"text":"The QL pack definition file."}}]},{"name":"securitytesting/customqueries","semanticVersion":"0.0.1","locations":[{"uri":"file:///Users/I578094/Documents/codeql/qlpacks/securitytesting/customqueries/0.0.1/","description":{"text":"The QL pack root directory."}},{"uri":"file:///Users/I578094/Documents/codeql/qlpacks/securitytesting/customqueries/0.0.1/qlpack.yml","description":{"text":"The QL pack definition file."}}]},{"name":"sap/sap-java-extensions","semanticVersion":"0.0.1+ba94d70294c66cfc4fcb4fa7ea2a63cb9df5058e","locations":[{"uri":"file:///Users/I578094/Documents/codeql/qlpacks/sap/sap-java-extensions/0.0.1/","description":{"text":"The QL pack root directory."}},{"uri":"file:///Users/I578094/Documents/codeql/qlpacks/sap/sap-java-extensions/0.0.1/qlpack.yml","description":{"text":"The QL pack definition file."}}],"properties":{"isCodeQLModelPack":true}}]},"invocations":[{"toolExecutionNotifications":[{"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/com/mycompany/jenkinsplayground/App.java","uriBaseId":"%SRCROOT%","index":0}}}],"message":{"text":""},"level":"none","descriptor":{"id":"java/diagnostics/successfully-extracted-files","index":1},"properties":{"formattedMessage":{"text":""}}},{"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/test/java/com/mycompany/jenkinsplayground/AppTest.java","uriBaseId":"%SRCROOT%","index":1}}}],"message":{"text":""},"level":"none","descriptor":{"id":"java/diagnostics/successfully-extracted-files","index":1},"properties":{"formattedMessage":{"text":""}}},{"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/com/mycompany/jenkinsplayground/App.java","uriBaseId":"%SRCROOT%","index":0}}}],"message":{"text":""},"level":"none","descriptor":{"id":"java/baseline/expected-extracted-files","index":3},"properties":{"formattedMessage":{"text":""}}},{"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/test/java/com/mycompany/jenkinsplayground/AppTest.java","uriBaseId":"%SRCROOT%","index":1}}}],"message":{"text":""},"level":"none","descriptor":{"id":"java/baseline/expected-extracted-files","index":3},"properties":{"formattedMessage":{"text":""}}},{"message":{"text":""},"level":"note","timeUtc":"2024-10-14T13:21:40.438+00:00","descriptor":{"id":"cli/sip-enablement","index":4},"properties":{"attributes":{"isEnabled":true},"visibility":{"statusPage":false,"telemetry":true}}}],"executionSuccessful":true}],"artifacts":[{"location":{"uri":"src/main/java/com/mycompany/jenkinsplayground/App.java","uriBaseId":"%SRCROOT%","index":0}},{"location":{"uri":"src/test/java/com/mycompany/jenkinsplayground/AppTest.java","uriBaseId":"%SRCROOT%","index":1}}],"results":[],"columnKind":"utf16CodeUnits","properties":{"semmle.formatSpecifier":"sarif-latest","metricResults":[{"rule":{"id":"java/summary/lines-of-code-kotlin","index":105},"ruleId":"java/summary/lines-of-code-kotlin","ruleIndex":105,"value":0},{"rule":{"id":"java/summary/lines-of-code","index":106},"ruleId":"java/summary/lines-of-code","ruleIndex":106,"value":20,"baseline":20},{"rule":{"id":"java/summary/lines-of-code-java","index":107},"ruleId":"java/summary/lines-of-code-java","ruleIndex":107,"value":20},{"rule":{"id":"java/telemetry/supported-external-api-taint","index":108},"ruleId":"java/telemetry/supported-external-api-taint","ruleIndex":108,"value":1,"message":{"text":"java.io.PrintStream#println(String)"}},{"rule":{"id":"java/telemetry/external-libs","index":111},"ruleId":"java/telemetry/external-libs","ruleIndex":111,"value":1,"message":{"text":"rt.jar"}},{"rule":{"id":"java/telemetry/supported-external-api-sinks","index":112},"ruleId":"java/telemetry/supported-external-api-sinks","ruleIndex":112,"value":1,"message":{"text":"java.io.PrintStream#println(String)"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":30,"message":{"text":"Number of files with extension properties"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":3,"message":{"text":"Number of files with extension xml"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":2,"message":{"text":"Number of files with extension java"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":706,"message":{"text":"Number of files with extension class"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":2,"message":{"text":"Number of files with extension jar"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":2,"message":{"text":"Number of diagnostics from CodeQL Java extractor with severity 2"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":1,"message":{"text":"Annotation processors enabled: true"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":1,"message":{"text":"Used annotation processor: lombok.launch.AnnotationProcessorHider$AnnotationProcessor"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":1,"message":{"text":"Used annotation processor: lombok.launch.AnnotationProcessorHider$ClaimingProcessor"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":2,"message":{"text":"Total number of diagnostics from CodeQL Java extractor"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":142,"message":{"text":"Total number of lines with extension xml"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":34,"message":{"text":"Total number of lines with extension java"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":142,"message":{"text":"Number of lines of code with extension xml"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":20,"message":{"text":"Number of lines of code with extension java"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":744,"message":{"text":"Number of files"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":176,"message":{"text":"Total number of lines"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":162,"message":{"text":"Number of lines of code"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":4,"message":{"text":"Number of calls with call target"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":16,"message":{"text":"Number of expressions with known type"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":0,"message":{"text":"Number of expressions with unknown type"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":0,"message":{"text":"Number of calls with missing call target"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":100,"message":{"text":"Percentage of calls with call target"}},{"rule":{"id":"java/telemetry/extraction-information","index":113},"ruleId":"java/telemetry/extraction-information","ruleIndex":113,"value":100,"message":{"text":"Percentage of expressions with known type"}},{"rule":{"id":"java/telemetry/supported-external-api","index":114},"ruleId":"java/telemetry/supported-external-api","ruleIndex":114,"value":1,"message":{"text":"java.io.PrintStream#println(String)"}}]}}]}